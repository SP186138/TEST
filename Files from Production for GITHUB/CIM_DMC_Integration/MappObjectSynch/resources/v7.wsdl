<?xml version="1.0" encoding="utf-8"?><!-- eC-messenger API 0.137 --><definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://ecircle.com/developer/ecmapi" xmlns:api="http://ecircle.com/developer/apigen-wsdl" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ecircle.com/developer/ecmapi" name="EcmWS">
    <types>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" targetNamespace="http://ecircle.com/developer/ecmapi">
            <xs:element name="ApiException" type="tns:ApiException"/>
            <xs:element name="AsyncException" type="tns:AsyncException"/>
            <xs:element name="BatchException" type="tns:BatchException"/>
            <xs:element name="InvalidParameterException" type="tns:InvalidParameterException"/>
            <xs:element name="LandingpageException" type="tns:LandingpageException"/>
            <xs:element name="NoSuchObjectException" type="tns:NoSuchObjectException"/>
            <xs:element name="ObjectAlreadyExistsException" type="tns:ObjectAlreadyExistsException"/>
            <xs:element name="ServiceException" type="tns:ServiceException"/>
            <xs:element name="UnexpectedErrorException" type="tns:UnexpectedErrorException"/>
            <xs:element name="systemGetApiVersion" type="tns:systemGetApiVersion"/>
            <xs:element name="systemGetApiVersionResponse" type="tns:systemGetApiVersionResponse"/>
            <xs:element name="systemGetEcmVersion" type="tns:systemGetEcmVersion"/>
            <xs:element name="systemGetEcmVersionResponse" type="tns:systemGetEcmVersionResponse"/>
            <xs:element name="metaCreateAttributeDefinitions" type="tns:metaCreateAttributeDefinitions"/>
            <xs:element name="metaCreateAttributeDefinitionsResponse" type="tns:metaCreateAttributeDefinitionsResponse"/>
            <xs:element name="metaGetAttributeDefinitions" type="tns:metaGetAttributeDefinitions"/>
            <xs:element name="metaGetAttributeDefinitionsResponse" type="tns:metaGetAttributeDefinitionsResponse"/>
            <xs:element name="metaArchiveAttributeDefinitions" type="tns:metaArchiveAttributeDefinitions"/>
            <xs:element name="metaArchiveAttributeDefinitionsResponse" type="tns:metaArchiveAttributeDefinitionsResponse"/>
            <xs:element name="metaActivateAttributeDefinitions" type="tns:metaActivateAttributeDefinitions"/>
            <xs:element name="metaActivateAttributeDefinitionsResponse" type="tns:metaActivateAttributeDefinitionsResponse"/>
            <xs:element name="metaMergeAttributeDefinitions" type="tns:metaMergeAttributeDefinitions"/>
            <xs:element name="metaMergeAttributeDefinitionsResponse" type="tns:metaMergeAttributeDefinitionsResponse"/>
            <xs:element name="metaCreateLinkCategories" type="tns:metaCreateLinkCategories"/>
            <xs:element name="metaCreateLinkCategoriesResponse" type="tns:metaCreateLinkCategoriesResponse"/>
            <xs:element name="metaGetLinkCategories" type="tns:metaGetLinkCategories"/>
            <xs:element name="metaGetLinkCategoriesResponse" type="tns:metaGetLinkCategoriesResponse"/>
            <xs:element name="metaUpdateLinkCategory" type="tns:metaUpdateLinkCategory"/>
            <xs:element name="metaUpdateLinkCategoryResponse" type="tns:metaUpdateLinkCategoryResponse"/>
            <xs:element name="metaDeleteLinkCategory" type="tns:metaDeleteLinkCategory"/>
            <xs:element name="metaDeleteLinkCategoryResponse" type="tns:metaDeleteLinkCategoryResponse"/>
            <xs:element name="metaAttachTags" type="tns:metaAttachTags"/>
            <xs:element name="metaAttachTagsResponse" type="tns:metaAttachTagsResponse"/>
            <xs:element name="metaDetachTags" type="tns:metaDetachTags"/>
            <xs:element name="metaDetachTagsResponse" type="tns:metaDetachTagsResponse"/>
            <xs:element name="metaFindByTags" type="tns:metaFindByTags"/>
            <xs:element name="metaFindByTagsResponse" type="tns:metaFindByTagsResponse"/>
            <xs:element name="metaGetTags" type="tns:metaGetTags"/>
            <xs:element name="metaGetTagsResponse" type="tns:metaGetTagsResponse"/>
            <xs:element name="groupClone" type="tns:groupClone"/>
            <xs:element name="groupCloneResponse" type="tns:groupCloneResponse"/>
            <xs:element name="groupGet" type="tns:groupGet"/>
            <xs:element name="groupGetResponse" type="tns:groupGetResponse"/>
            <xs:element name="groupFindIdsByAttributes" type="tns:groupFindIdsByAttributes"/>
            <xs:element name="groupFindIdsByAttributesResponse" type="tns:groupFindIdsByAttributesResponse"/>
            <xs:element name="groupSetAttributes" type="tns:groupSetAttributes"/>
            <xs:element name="groupSetAttributesResponse" type="tns:groupSetAttributesResponse"/>
            <xs:element name="groupGetAttributes" type="tns:groupGetAttributes"/>
            <xs:element name="groupGetAttributesResponse" type="tns:groupGetAttributesResponse"/>
            <xs:element name="groupOverrideGroupSettings" type="tns:groupOverrideGroupSettings"/>
            <xs:element name="groupOverrideGroupSettingsResponse" type="tns:groupOverrideGroupSettingsResponse"/>
            <xs:element name="groupGetPreparedMessages" type="tns:groupGetPreparedMessages"/>
            <xs:element name="groupGetPreparedMessagesResponse" type="tns:groupGetPreparedMessagesResponse"/>
            <xs:element name="groupGetAllGroupSettingsTemplates" type="tns:groupGetAllGroupSettingsTemplates"/>
            <xs:element name="groupGetAllGroupSettingsTemplatesResponse" type="tns:groupGetAllGroupSettingsTemplatesResponse"/>
            <xs:element name="groupArchive" type="tns:groupArchive"/>
            <xs:element name="groupArchiveResponse" type="tns:groupArchiveResponse"/>
            <xs:element name="groupActivate" type="tns:groupActivate"/>
            <xs:element name="groupActivateResponse" type="tns:groupActivateResponse"/>
            <xs:element name="userCreate" type="tns:userCreate"/>
            <xs:element name="userCreateResponse" type="tns:userCreateResponse"/>
            <xs:element name="userGet" type="tns:userGet"/>
            <xs:element name="userGetResponse" type="tns:userGetResponse"/>
            <xs:element name="userGetByEmail" type="tns:userGetByEmail"/>
            <xs:element name="userGetByEmailResponse" type="tns:userGetByEmailResponse"/>
            <xs:element name="userGetByIdentifier" type="tns:userGetByIdentifier"/>
            <xs:element name="userGetByIdentifierResponse" type="tns:userGetByIdentifierResponse"/>
            <xs:element name="userGetByMobileNumber" type="tns:userGetByMobileNumber"/>
            <xs:element name="userGetByMobileNumberResponse" type="tns:userGetByMobileNumberResponse"/>
            <xs:element name="userGetProfile" type="tns:userGetProfile"/>
            <xs:element name="userGetProfileResponse" type="tns:userGetProfileResponse"/>
            <xs:element name="userGetProfileByEmail" type="tns:userGetProfileByEmail"/>
            <xs:element name="userGetProfileByEmailResponse" type="tns:userGetProfileByEmailResponse"/>
            <xs:element name="userGetProfileByMobileNumber" type="tns:userGetProfileByMobileNumber"/>
            <xs:element name="userGetProfileByMobileNumberResponse" type="tns:userGetProfileByMobileNumberResponse"/>
            <xs:element name="userUpdateProfile" type="tns:userUpdateProfile"/>
            <xs:element name="userUpdateProfileResponse" type="tns:userUpdateProfileResponse"/>
            <xs:element name="userUpdateProfileByEmail" type="tns:userUpdateProfileByEmail"/>
            <xs:element name="userUpdateProfileByEmailResponse" type="tns:userUpdateProfileByEmailResponse"/>
            <xs:element name="userUpdateProfileByMobileNumber" type="tns:userUpdateProfileByMobileNumber"/>
            <xs:element name="userUpdateProfileByMobileNumberResponse" type="tns:userUpdateProfileByMobileNumberResponse"/>
            <xs:element name="userReplaceProfile" type="tns:userReplaceProfile"/>
            <xs:element name="userReplaceProfileResponse" type="tns:userReplaceProfileResponse"/>
            <xs:element name="userReplaceProfileByEmail" type="tns:userReplaceProfileByEmail"/>
            <xs:element name="userReplaceProfileByEmailResponse" type="tns:userReplaceProfileByEmailResponse"/>
            <xs:element name="userReplaceProfileByMobileNumber" type="tns:userReplaceProfileByMobileNumber"/>
            <xs:element name="userReplaceProfileByMobileNumberResponse" type="tns:userReplaceProfileByMobileNumberResponse"/>
            <xs:element name="userDelete" type="tns:userDelete"/>
            <xs:element name="userDeleteResponse" type="tns:userDeleteResponse"/>
            <xs:element name="userDeleteByEmail" type="tns:userDeleteByEmail"/>
            <xs:element name="userDeleteByEmailResponse" type="tns:userDeleteByEmailResponse"/>
            <xs:element name="userDeleteByMobileNumber" type="tns:userDeleteByMobileNumber"/>
            <xs:element name="userDeleteByMobileNumberResponse" type="tns:userDeleteByMobileNumberResponse"/>
            <xs:element name="userGetMessageHistory" type="tns:userGetMessageHistory"/>
            <xs:element name="userGetMessageHistoryResponse" type="tns:userGetMessageHistoryResponse"/>
            <xs:element name="membershipSubscribe" type="tns:membershipSubscribe"/>
            <xs:element name="membershipSubscribeResponse" type="tns:membershipSubscribeResponse"/>
            <xs:element name="membershipSubscribeByEmail" type="tns:membershipSubscribeByEmail"/>
            <xs:element name="membershipSubscribeByEmailResponse" type="tns:membershipSubscribeByEmailResponse"/>
            <xs:element name="membershipUnsubscribe" type="tns:membershipUnsubscribe"/>
            <xs:element name="membershipUnsubscribeResponse" type="tns:membershipUnsubscribeResponse"/>
            <xs:element name="membershipUnsubscribeFromMessage" type="tns:membershipUnsubscribeFromMessage"/>
            <xs:element name="membershipUnsubscribeFromMessageResponse" type="tns:membershipUnsubscribeFromMessageResponse"/>
            <xs:element name="membershipUnsubscribeByEmail" type="tns:membershipUnsubscribeByEmail"/>
            <xs:element name="membershipUnsubscribeByEmailResponse" type="tns:membershipUnsubscribeByEmailResponse"/>
            <xs:element name="membershipUnsubscribeFromMessageByEmail" type="tns:membershipUnsubscribeFromMessageByEmail"/>
            <xs:element name="membershipUnsubscribeFromMessageByEmailResponse" type="tns:membershipUnsubscribeFromMessageByEmailResponse"/>
            <xs:element name="membershipCreate" type="tns:membershipCreate"/>
            <xs:element name="membershipCreateResponse" type="tns:membershipCreateResponse"/>
            <xs:element name="membershipDelete" type="tns:membershipDelete"/>
            <xs:element name="membershipDeleteResponse" type="tns:membershipDeleteResponse"/>
            <xs:element name="membershipGet" type="tns:membershipGet"/>
            <xs:element name="membershipGetResponse" type="tns:membershipGetResponse"/>
            <xs:element name="membershipGetByEmail" type="tns:membershipGetByEmail"/>
            <xs:element name="membershipGetByEmailResponse" type="tns:membershipGetByEmailResponse"/>
            <xs:element name="membershipFindAll" type="tns:membershipFindAll"/>
            <xs:element name="membershipFindAllResponse" type="tns:membershipFindAllResponse"/>
            <xs:element name="membershipFindAllByEmail" type="tns:membershipFindAllByEmail"/>
            <xs:element name="membershipFindAllByEmailResponse" type="tns:membershipFindAllByEmailResponse"/>
            <xs:element name="membershipGetAttributes" type="tns:membershipGetAttributes"/>
            <xs:element name="membershipGetAttributesResponse" type="tns:membershipGetAttributesResponse"/>
            <xs:element name="membershipGetAttributesByEmail" type="tns:membershipGetAttributesByEmail"/>
            <xs:element name="membershipGetAttributesByEmailResponse" type="tns:membershipGetAttributesByEmailResponse"/>
            <xs:element name="membershipUpdateAttributes" type="tns:membershipUpdateAttributes"/>
            <xs:element name="membershipUpdateAttributesResponse" type="tns:membershipUpdateAttributesResponse"/>
            <xs:element name="membershipReplaceAttributes" type="tns:membershipReplaceAttributes"/>
            <xs:element name="membershipReplaceAttributesResponse" type="tns:membershipReplaceAttributesResponse"/>
            <xs:element name="messageSendSingle" type="tns:messageSendSingle"/>
            <xs:element name="messageSendSingleResponse" type="tns:messageSendSingleResponse"/>
            <xs:element name="messageSendTransactional" type="tns:messageSendTransactional"/>
            <xs:element name="messageSendTransactionalResponse" type="tns:messageSendTransactionalResponse"/>
            <xs:element name="messageGetUsedPersonalizations" type="tns:messageGetUsedPersonalizations"/>
            <xs:element name="messageGetUsedPersonalizationsResponse" type="tns:messageGetUsedPersonalizationsResponse"/>
            <xs:element name="messageGetManyUsedPersonalizations" type="tns:messageGetManyUsedPersonalizations"/>
            <xs:element name="messageGetManyUsedPersonalizationsResponse" type="tns:messageGetManyUsedPersonalizationsResponse"/>
            <xs:element name="messageValidate" type="tns:messageValidate"/>
            <xs:element name="messageValidateResponse" type="tns:messageValidateResponse"/>
            <xs:element name="messageValidateMany" type="tns:messageValidateMany"/>
            <xs:element name="messageValidateManyResponse" type="tns:messageValidateManyResponse"/>
            <xs:element name="messageGetStatistics" type="tns:messageGetStatistics"/>
            <xs:element name="messageGetStatisticsResponse" type="tns:messageGetStatisticsResponse"/>
            <xs:element name="messageGetStatisticsByExternalMessageId" type="tns:messageGetStatisticsByExternalMessageId"/>
            <xs:element name="messageGetStatisticsByExternalMessageIdResponse" type="tns:messageGetStatisticsByExternalMessageIdResponse"/>
            <xs:element name="messageFind" type="tns:messageFind"/>
            <xs:element name="messageFindResponse" type="tns:messageFindResponse"/>
            <xs:element name="messageGetTimeDistribution" type="tns:messageGetTimeDistribution"/>
            <xs:element name="messageGetTimeDistributionResponse" type="tns:messageGetTimeDistributionResponse"/>
            <xs:element name="messageGetTimeDistributionByExternalMessageId" type="tns:messageGetTimeDistributionByExternalMessageId"/>
            <xs:element name="messageGetTimeDistributionByExternalMessageIdResponse" type="tns:messageGetTimeDistributionByExternalMessageIdResponse"/>
            <xs:element name="landingpageFind" type="tns:landingpageFind"/>
            <xs:element name="landingpageFindResponse" type="tns:landingpageFindResponse"/>
            <xs:element name="landingpageGetStatus" type="tns:landingpageGetStatus"/>
            <xs:element name="landingpageGetStatusResponse" type="tns:landingpageGetStatusResponse"/>
            <xs:element name="landingpageDelete" type="tns:landingpageDelete"/>
            <xs:element name="landingpageDeleteResponse" type="tns:landingpageDeleteResponse"/>
            <xs:element name="landingpageDeleteMany" type="tns:landingpageDeleteMany"/>
            <xs:element name="landingpageDeleteManyResponse" type="tns:landingpageDeleteManyResponse"/>
            <xs:element name="cmsGetMessageDefinitions" type="tns:cmsGetMessageDefinitions"/>
            <xs:element name="cmsGetMessageDefinitionsResponse" type="tns:cmsGetMessageDefinitionsResponse"/>
            <xs:element name="cmsGetMimeMessage" type="tns:cmsGetMimeMessage"/>
            <xs:element name="cmsGetMimeMessageResponse" type="tns:cmsGetMimeMessageResponse"/>
            <xs:element name="asyncSubmit" type="tns:asyncSubmit"/>
            <xs:element name="asyncSubmitResponse" type="tns:asyncSubmitResponse"/>
            <xs:element name="asyncListTopics" type="tns:asyncListTopics"/>
            <xs:element name="asyncListTopicsResponse" type="tns:asyncListTopicsResponse"/>
            <xs:element name="asyncPoll" type="tns:asyncPoll"/>
            <xs:element name="asyncPollResponse" type="tns:asyncPollResponse"/>
            <xs:element name="asyncGetSubmitCount" type="tns:asyncGetSubmitCount"/>
            <xs:element name="asyncGetSubmitCountResponse" type="tns:asyncGetSubmitCountResponse"/>
            <xs:element name="asyncGetPollCount" type="tns:asyncGetPollCount"/>
            <xs:element name="asyncGetPollCountResponse" type="tns:asyncGetPollCountResponse"/>
            <xs:element name="asyncGetRemainingCapacity" type="tns:asyncGetRemainingCapacity"/>
            <xs:element name="asyncGetRemainingCapacityResponse" type="tns:asyncGetRemainingCapacityResponse"/>
            <xs:element name="contentStore" type="tns:contentStore"/>
            <xs:element name="contentStoreResponse" type="tns:contentStoreResponse"/>
            <xs:element name="contentDelete" type="tns:contentDelete"/>
            <xs:element name="contentDeleteResponse" type="tns:contentDeleteResponse"/>
            <xs:element name="emailSendMessages" type="tns:emailSendMessages"/>
            <xs:element name="emailSendMessagesResponse" type="tns:emailSendMessagesResponse"/>
            <xs:element name="blacklistCreateGroupEntries" type="tns:blacklistCreateGroupEntries"/>
            <xs:element name="blacklistCreateGroupEntriesResponse" type="tns:blacklistCreateGroupEntriesResponse"/>
            <xs:element name="blacklistCreateSystemEntries" type="tns:blacklistCreateSystemEntries"/>
            <xs:element name="blacklistCreateSystemEntriesResponse" type="tns:blacklistCreateSystemEntriesResponse"/>
            <xs:element name="blacklistDeleteGroupEntries" type="tns:blacklistDeleteGroupEntries"/>
            <xs:element name="blacklistDeleteGroupEntriesResponse" type="tns:blacklistDeleteGroupEntriesResponse"/>
            <xs:element name="blacklistDeleteSystemEntries" type="tns:blacklistDeleteSystemEntries"/>
            <xs:element name="blacklistDeleteSystemEntriesResponse" type="tns:blacklistDeleteSystemEntriesResponse"/>
            <xs:element name="draftmessageCreate" type="tns:draftmessageCreate"/>
            <xs:element name="draftmessageCreateResponse" type="tns:draftmessageCreateResponse"/>
            <xs:element name="draftmessageGet" type="tns:draftmessageGet"/>
            <xs:element name="draftmessageGetResponse" type="tns:draftmessageGetResponse"/>
            <xs:element name="draftmessageUpdate" type="tns:draftmessageUpdate"/>
            <xs:element name="draftmessageUpdateResponse" type="tns:draftmessageUpdateResponse"/>
            <xs:element name="draftmessageDelete" type="tns:draftmessageDelete"/>
            <xs:element name="draftmessageDeleteResponse" type="tns:draftmessageDeleteResponse"/>
            <xs:element name="draftmessageFind" type="tns:draftmessageFind"/>
            <xs:element name="draftmessageFindResponse" type="tns:draftmessageFindResponse"/>
            <xs:element name="preparedmessageFind" type="tns:preparedmessageFind"/>
            <xs:element name="preparedmessageFindResponse" type="tns:preparedmessageFindResponse"/>
            <xs:element name="relatedDataCreateRecord" type="tns:relatedDataCreateRecord"/>
            <xs:element name="relatedDataCreateRecordResponse" type="tns:relatedDataCreateRecordResponse"/>
            <xs:element name="relatedDataUpdateRecords" type="tns:relatedDataUpdateRecords"/>
            <xs:element name="relatedDataUpdateRecordsResponse" type="tns:relatedDataUpdateRecordsResponse"/>
            <xs:element name="relatedDataDeleteRecords" type="tns:relatedDataDeleteRecords"/>
            <xs:element name="relatedDataDeleteRecordsResponse" type="tns:relatedDataDeleteRecordsResponse"/>
            <xs:element name="contactCreate" type="tns:contactCreate"/>
            <xs:element name="contactCreateResponse" type="tns:contactCreateResponse"/>
            <xs:element name="contactGet" type="tns:contactGet"/>
            <xs:element name="contactGetResponse" type="tns:contactGetResponse"/>
            <xs:element name="contactUpdate" type="tns:contactUpdate"/>
            <xs:element name="contactUpdateResponse" type="tns:contactUpdateResponse"/>
            <xs:element name="contactDelete" type="tns:contactDelete"/>
            <xs:element name="contactDeleteResponse" type="tns:contactDeleteResponse"/>
            <xs:element name="processGetDetails" type="tns:processGetDetails"/>
            <xs:element name="processGetDetailsResponse" type="tns:processGetDetailsResponse"/>
            <xs:element name="processApplyAction" type="tns:processApplyAction"/>
            <xs:element name="processApplyActionResponse" type="tns:processApplyActionResponse"/>
            <xs:element name="automationFind" type="tns:automationFind"/>
            <xs:element name="automationFindResponse" type="tns:automationFindResponse"/>
            <xs:element name="automationGetDetails" type="tns:automationGetDetails"/>
            <xs:element name="automationGetDetailsResponse" type="tns:automationGetDetailsResponse"/>
            <xs:element name="automationRunOnce" type="tns:automationRunOnce"/>
            <xs:element name="automationRunOnceResponse" type="tns:automationRunOnceResponse"/>
            <xs:element name="asyncResult" type="tns:asyncResult"/>
            <xs:element name="attachment" type="tns:attachment"/>
            <xs:element name="attachmentReference" type="tns:attachmentReference"/>
            <xs:element name="attribute" type="tns:attribute"/>
            <xs:element name="attributeDefinition" type="tns:attributeDefinition"/>
            <xs:element name="attributeType" type="tns:attributeType"/>
            <xs:element name="automationDetails" type="tns:automationDetails"/>
            <xs:element name="automationFilter" type="tns:automationFilter"/>
            <xs:element name="automationStatus" type="tns:automationStatus"/>
            <xs:element name="automationType" type="tns:automationType"/>
            <xs:element name="batchReport" type="tns:batchReport"/>
            <xs:element name="batchResult" type="tns:batchResult"/>
            <xs:element name="blacklistEntry" type="tns:blacklistEntry"/>
            <xs:element name="blacklistEntryType" type="tns:blacklistEntryType"/>
            <xs:element name="callResult" type="tns:callResult"/>
            <xs:element name="cmsMessageDefinition" type="tns:cmsMessageDefinition"/>
            <xs:element name="contact" type="tns:contact"/>
            <xs:element name="contactIdentifier" type="tns:contactIdentifier"/>
            <xs:element name="contactIdentifierType" type="tns:contactIdentifierType"/>
            <xs:element name="createResult" type="tns:createResult"/>
            <xs:element name="deleteResult" type="tns:deleteResult"/>
            <xs:element name="draftMessage" type="tns:draftMessage"/>
            <xs:element name="draftMessageFilter" type="tns:draftMessageFilter"/>
            <xs:element name="draftMessageSummary" type="tns:draftMessageSummary"/>
            <xs:element name="errorActor" type="tns:errorActor"/>
            <xs:element name="errorCode" type="tns:errorCode"/>
            <xs:element name="group" type="tns:group"/>
            <xs:element name="groupCloneOptions" type="tns:groupCloneOptions"/>
            <xs:element name="groupSettingsTemplate" type="tns:groupSettingsTemplate"/>
            <xs:element name="landingpageFilter" type="tns:landingpageFilter"/>
            <xs:element name="landingpageSummary" type="tns:landingpageSummary"/>
            <xs:element name="linkCategory" type="tns:linkCategory"/>
            <xs:element name="membership" type="tns:membership"/>
            <xs:element name="mergeResult" type="tns:mergeResult"/>
            <xs:element name="mergeResultType" type="tns:mergeResultType"/>
            <xs:element name="message" type="tns:message"/>
            <xs:element name="messageBase" type="tns:messageBase"/>
            <xs:element name="messageContent" type="tns:messageContent"/>
            <xs:element name="messageFilter" type="tns:messageFilter"/>
            <xs:element name="messageHistory" type="tns:messageHistory"/>
            <xs:element name="messageStatistics" type="tns:messageStatistics"/>
            <xs:element name="messageStatus" type="tns:messageStatus"/>
            <xs:element name="messageSummary" type="tns:messageSummary"/>
            <xs:element name="messageTimeDistribution" type="tns:messageTimeDistribution"/>
            <xs:element name="messageTimeDistributionPeriod" type="tns:messageTimeDistributionPeriod"/>
            <xs:element name="messageType" type="tns:messageType"/>
            <xs:element name="preparedMessageFilter" type="tns:preparedMessageFilter"/>
            <xs:element name="preparedMessageSummary" type="tns:preparedMessageSummary"/>
            <xs:element name="processAction" type="tns:processAction"/>
            <xs:element name="processDetails" type="tns:processDetails"/>
            <xs:element name="processingType" type="tns:processingType"/>
            <xs:element name="processStatus" type="tns:processStatus"/>
            <xs:element name="relatedDataFilter" type="tns:relatedDataFilter"/>
            <xs:element name="relatedDataRecord" type="tns:relatedDataRecord"/>
            <xs:element name="relatedDataRecordAndFilter" type="tns:relatedDataRecordAndFilter"/>
            <xs:element name="runOnceResult" type="tns:runOnceResult"/>
            <xs:element name="subscriptionMode" type="tns:subscriptionMode"/>
            <xs:element name="taggedEntity" type="tns:taggedEntity"/>
            <xs:element name="timeDistributionInterval" type="tns:timeDistributionInterval"/>
            <xs:element name="user" type="tns:user"/>
            <xs:complexType name="systemGetApiVersion">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="systemGetApiVersionResponse">
                <xs:sequence>
                    <!-- Returns information about the internal API version currently in use. -->
                    <xs:element name="version" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="systemGetEcmVersion">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="systemGetEcmVersionResponse">
                <xs:sequence>
                    <!-- The version of your Digital Messaging Center system.
                        The DMC version is independent of the API version. -->
                    <xs:element name="version" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaCreateAttributeDefinitions">
                <xs:sequence>
                    <!-- A list of settings which describe the user profile attribute that should be created. -->
                    <xs:element name="attributeDefinitions" type="tns:attributeDefinition" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaCreateAttributeDefinitionsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaGetAttributeDefinitions">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaGetAttributeDefinitionsResponse">
                <xs:sequence>
                    <!-- A list of all available custom attributes and their definitions. -->
                    <xs:element name="attributeDefinitions" type="tns:attributeDefinition" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaArchiveAttributeDefinitions">
                <xs:sequence>
                    <!-- A list of attribute names that should be archived. -->
                    <xs:element name="attributeNames" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaArchiveAttributeDefinitionsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaActivateAttributeDefinitions">
                <xs:sequence>
                    <!-- The list of attributes to be reactivated. -->
                    <xs:element name="attributeNames" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaActivateAttributeDefinitionsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaMergeAttributeDefinitions">
                <xs:sequence>
                    <!-- A list of AttributeDefinitions that should be created, changed or left untouched. -->
                    <xs:element name="attributeDefinitions" type="tns:attributeDefinition" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaMergeAttributeDefinitionsResponse">
                <xs:sequence>
                    <!-- A list of all the attributes that should remain active in the system. -->
                    <xs:element name="mergeResults" type="tns:mergeResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaCreateLinkCategories">
                <xs:sequence>
                    <!-- A list of link categories that should be created. -->
                    <xs:element name="categories" type="tns:linkCategory" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaCreateLinkCategoriesResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaGetLinkCategories">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaGetLinkCategoriesResponse">
                <xs:sequence>
                    <!-- A list if link categories, active in the system. -->
                    <xs:element name="linkCategories" type="tns:linkCategory" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaUpdateLinkCategory">
                <xs:sequence>
                    <!-- The link category object to be updated by the new values. -->
                    <xs:element name="category" type="tns:linkCategory" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaUpdateLinkCategoryResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaDeleteLinkCategory">
                <xs:sequence>
                    <!-- A list of link category names identifying the categories to be deleted. -->
                    <xs:element name="categoryNames" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaDeleteLinkCategoryResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaAttachTags">
                <xs:sequence>
                    <!-- Entity id. -->
                    <xs:element name="entityId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Entity type.
                        Available entity types are listed in description of type "TaggedEntity" (field "entityType"). -->
                    <xs:element name="entityType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- List tags to be attached. -->
                    <xs:element name="tags" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaAttachTagsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaDetachTags">
                <xs:sequence>
                    <!-- Entity id. -->
                    <xs:element name="entityId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Entity type.
                        Available entity types are listed in description of type "TaggedEntity" (field "entityType"). -->
                    <xs:element name="entityType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- List tags to be detached. -->
                    <xs:element name="tags" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaDetachTagsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="metaFindByTags">
                <xs:sequence>
                    <!-- List of tags which will be matched in searched entities.
                        AND semantics: only entities labeled with ALL of given tags are matched. -->
                    <xs:element name="tags" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- If defined - only entities of given type will be matched. -->
                    <xs:element name="entityType" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaFindByTagsResponse">
                <xs:sequence>
                    <!-- List of tag search results -->
                    <xs:element name="results" type="tns:taggedEntity" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaGetTags">
                <xs:sequence>
                    <!-- Entity id. -->
                    <xs:element name="entityId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Entity type.
                        Available entity types are listed in description of type "TaggedEntity" (field "entityType"). -->
                    <xs:element name="entityType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="metaGetTagsResponse">
                <xs:sequence>
                    <!-- Entity with the belonging tags. -->
                    <xs:element name="result" type="tns:taggedEntity" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupClone">
                <xs:sequence>
                    <!-- The group ID of the group to be cloned. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The clone options container. -->
                    <xs:element name="options" type="tns:groupCloneOptions" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupCloneResponse">
                <xs:sequence>
                    <!-- The new group object, cloned on the base of the clone options and the source group. -->
                    <xs:element name="group" type="tns:group" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupGet">
                <xs:sequence>
                    <!-- The group ID of the group to be returned. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupGetResponse">
                <xs:sequence>
                    <!-- The group object. -->
                    <xs:element name="group" type="tns:group" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupFindIdsByAttributes">
                <xs:sequence>
                    <!-- The list of Attributes to search for. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupFindIdsByAttributesResponse">
                <xs:sequence>
                    <!-- List of DMC group IDs that use the specified attributes. -->
                    <xs:element name="groupIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupSetAttributes">
                <xs:sequence>
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The list of attributes to be defined. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupSetAttributesResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="groupGetAttributes">
                <xs:sequence>
                    <!-- The ID of the Group -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupGetAttributesResponse">
                <xs:sequence>
                    <!-- The list of group attributes. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupOverrideGroupSettings">
                <xs:sequence>
                    <!-- The ID of the group whose settings are to be overridden. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the settings template. -->
                    <xs:element name="settingsId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupOverrideGroupSettingsResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="groupGetPreparedMessages">
                <xs:sequence>
                    <!-- The id of the DMC group to which the prepared messages are assigned. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupGetPreparedMessagesResponse">
                <xs:sequence>
                    <!-- The list of DMC Message IDs that refer to prepared messages in the group. -->
                    <xs:element name="messageIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupGetAllGroupSettingsTemplates">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="groupGetAllGroupSettingsTemplatesResponse">
                <xs:sequence>
                    <!-- List of GroupSettingsTemplates -->
                    <xs:element name="groupSettingsTemplates" type="tns:groupSettingsTemplate" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupArchive">
                <xs:sequence>
                    <!-- A list of the group IDs that should be archived. -->
                    <xs:element name="groupIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupArchiveResponse">
                <xs:sequence>
                    <!-- Archiving result list. Each result contains information about:
                        <ul>
                            <li> Group ID.</li>
                    	    <li> Error code, if an error occurs during archiving process.</li> 
                    	    <li> Detailed error message, if any.</li>
                    	</ul> -->
                    <xs:element name="archivingResults" type="tns:callResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupActivate">
                <xs:sequence>
                    <!-- List of archived group IDs that should be reactivated. -->
                    <xs:element name="groupIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="groupActivateResponse">
                <xs:sequence>
                    <!-- Activating result list. Each result contains information about:
                        <ul>
                            <li>Group ID</li>
                    	    <li>Error code, if an error occurs during activation process. </li> 
                    	    <li>Detailed error message, if any.</li> 
                    	</ul> -->
                    <xs:element name="activatingResults" type="tns:callResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userCreate">
                <xs:sequence>
                    <!-- The email address of the user to be created, must be valid -->
                    <xs:element name="email" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The mobile number of the user to be created, must be valid -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- A list of custom attribute values that should be set for this new user. 
                        It is not possible to create new attributes while creating a user.
                        The attributes must be defined in the system beforehand, and the values defined here should correspond to the type of attribute. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userCreateResponse">
                <xs:sequence>
                    <!-- The new user. -->
                    <xs:element name="user" type="tns:user" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGet">
                <xs:sequence>
                    <!-- The user ID. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetResponse">
                <xs:sequence>
                    <!-- The user object. -->
                    <xs:element name="user" type="tns:user" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByEmail">
                <xs:sequence>
                    <!-- The user's email address. The email address is unique within the eC-messenger system. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByEmailResponse">
                <xs:sequence>
                    <!-- The user object. -->
                    <xs:element name="user" type="tns:user" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByIdentifier">
                <xs:sequence>
                    <!-- The custom identifier. -->
                    <xs:element name="identifier" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByIdentifierResponse">
                <xs:sequence>
                    <!-- The user object. -->
                    <xs:element name="user" type="tns:user" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByMobileNumber">
                <xs:sequence>
                    <!-- The mobile number of the user. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetByMobileNumberResponse">
                <xs:sequence>
                    <!-- The user object. -->
                    <xs:element name="user" type="tns:user" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfile">
                <xs:sequence>
                    <!-- The user ID. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfileResponse">
                <xs:sequence>
                    <!-- The list of profile attributes of the user. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfileByEmail">
                <xs:sequence>
                    <!-- The email address of the user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfileByEmailResponse">
                <xs:sequence>
                    <!-- The list of profile data stored in the user attributes. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfileByMobileNumber">
                <xs:sequence>
                    <!-- The mobile number of the user. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetProfileByMobileNumberResponse">
                <xs:sequence>
                    <!-- The list of profile data stored in the user attributes. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userUpdateProfile">
                <xs:sequence>
                    <!-- The ID of the user to be updated. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be updated. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userUpdateProfileResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userUpdateProfileByEmail">
                <xs:sequence>
                    <!-- The email address of the user to be updated. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be updated. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userUpdateProfileByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userUpdateProfileByMobileNumber">
                <xs:sequence>
                    <!-- The mobile number of the user to be updated. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be updated. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userUpdateProfileByMobileNumberResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userReplaceProfile">
                <xs:sequence>
                    <!-- User ID of the user to be updated. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be set. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userReplaceProfileResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userReplaceProfileByEmail">
                <xs:sequence>
                    <!-- The email address of the user to be updated. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be updated. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userReplaceProfileByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userReplaceProfileByMobileNumber">
                <xs:sequence>
                    <!-- The mobile number of the user to be updated. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attributes to be updated. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userReplaceProfileByMobileNumberResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userDelete">
                <xs:sequence>
                    <!-- The user ID of the user to be deleted. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userDeleteByEmail">
                <xs:sequence>
                    <!-- The email address of the user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userDeleteByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userDeleteByMobileNumber">
                <xs:sequence>
                    <!-- The mobile number of the user. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userDeleteByMobileNumberResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="userGetMessageHistory">
                <xs:sequence>
                    <!-- The User ID of the user for which the send out history is requested. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Start of time interval in ISO 8601 date time format. -->
                    <xs:element name="fromDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- End of time interval in ISO 8601 date time format. -->
                    <xs:element name="toDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="userGetMessageHistoryResponse">
                <xs:sequence>
                    <!-- List of MessageHistory objects. One MessageHistory object per message sent to the user in the time interval [fromDate, toDate]. -->
                    <xs:element name="messageHistory" type="tns:messageHistory" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipSubscribe">
                <xs:sequence>
                    <!-- The user ID of the user who will be subscribed. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID of the group the user will become a member of. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Subscription mode (e.g. opt in or double opt in). -->
                    <xs:element name="subscriptionMode" type="tns:subscriptionMode" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipSubscribeResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipSubscribeByEmail">
                <xs:sequence>
                    <!-- The email address of the user who will be subscribed. The email address must be unique within the eC-messenger system. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the group the user will be subscribed to. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Subscription mode (e.g. opt in or double opt in). in. -->
                    <xs:element name="subscriptionMode" type="tns:subscriptionMode" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipSubscribeByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribe">
                <xs:sequence>
                    <!-- The user ID of the user who will be unsubscribed. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID of the group the user will be unsubscribed from. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeFromMessage">
                <xs:sequence>
                    <!-- The ID of the unsubscribed user. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the group from which the user is unsubscribed. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the message the unsubscription is associated with. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeFromMessageResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeByEmail">
                <xs:sequence>
                    <!-- The email address of the user to be unsubscribed. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID of the group the user will be unsubscribed from. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeFromMessageByEmail">
                <xs:sequence>
                    <!-- The email address of the unsubscribed user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the group from which the user will be unsubscribed. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the message the unsubscription is associated with. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUnsubscribeFromMessageByEmailResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipCreate">
                <xs:sequence>
                    <!-- The user ID of the user. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID of the group. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipCreateResponse">
                <xs:sequence>
                    <!-- An object describing the membership. -->
                    <xs:element name="membership" type="tns:membership" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipDelete">
                <xs:sequence>
                    <!-- The user ID of the user who will be unsubscribed. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID of the group the user will be unsubscribed from. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipGet">
                <xs:sequence>
                    <!-- The ID of a user. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of a group. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetResponse">
                <xs:sequence>
                    <!-- The memberships object. -->
                    <xs:element name="membership" type="tns:membership" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetByEmail">
                <xs:sequence>
                    <!-- The email address of a user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of a group. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetByEmailResponse">
                <xs:sequence>
                    <!-- The memberships object. -->
                    <xs:element name="membership" type="tns:membership" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipFindAll">
                <xs:sequence>
                    <!-- The ID of a user. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipFindAllResponse">
                <xs:sequence>
                    <!-- List of memberships -->
                    <xs:element name="memberships" type="tns:membership" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipFindAllByEmail">
                <xs:sequence>
                    <!-- The email address of a user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipFindAllByEmailResponse">
                <xs:sequence>
                    <!-- List of memberships -->
                    <xs:element name="memberships" type="tns:membership" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetAttributes">
                <xs:sequence>
                    <!-- The user ID. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetAttributesResponse">
                <xs:sequence>
                    <!-- The requested member attributes. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetAttributesByEmail">
                <xs:sequence>
                    <!-- The email address of the user. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipGetAttributesByEmailResponse">
                <xs:sequence>
                    <!-- The requested group attributes. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUpdateAttributes">
                <xs:sequence>
                    <!-- The user ID. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The member attributes for this user in the group. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipUpdateAttributesResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="membershipReplaceAttributes">
                <xs:sequence>
                    <!-- The user ID. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The member attributes for this user in the group. -->
                    <xs:element name="attributes" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="membershipReplaceAttributesResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="messageSendSingle">
                <xs:sequence>
                    <!-- DMC Message ID of the prepared message to be used. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- DMC User ID of the intended recipient of that message. You may use user related 
                        methods such as findByEmail() to find that is based on other criteria. -->
                    <xs:element name="recipientId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Additional message content. -->
                    <xs:element name="additionalContent" type="tns:messageContent" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageSendSingleResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="messageSendTransactional">
                <xs:sequence>
                    <!-- Message ID of the prepared message to be sent. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Transaction ID. This ID is used to trace the transaction in DMC. -->
                    <xs:element name="externalTransactionFormula" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- eC-messenger user ID to whom the message is to be sent. You can use user-related
                        methods such as findByEmail() to find a user based on other criteria. -->
                    <xs:element name="recipientId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Additional message content. Additional message content refers to the parameters that are 
                        used to define the content of personalization placeholders or attachments. -->
                    <xs:element name="additionalContent" type="tns:messageContent" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageSendTransactionalResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="messageGetUsedPersonalizations">
                <xs:sequence>
                    <!-- Message ID of the prepared message to be sent. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetUsedPersonalizationsResponse">
                <xs:sequence>
                    <!-- The list of personalization attribute names, that are used in the referenced message. -->
                    <xs:element name="attributeNames" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetManyUsedPersonalizations">
                <xs:sequence>
                    <!-- A list of message IDs of the prepared messages to be sent. -->
                    <xs:element name="messageIds" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetManyUsedPersonalizationsResponse">
                <xs:sequence>
                    <!-- A List of CallResults:
                        Each CallResult - contains information about:
                        <ul>
                            <li>Message ID.</li>
                            <li>Empty or error code.</li>	                         
                            <li>Personalization attributes or error message</li> 
                        </ul> -->
                    <xs:element name="callResults" type="tns:callResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageValidate">
                <xs:sequence>
                    <!-- Message ID of the prepared message to be validated. -->
                    <xs:element name="messageId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageValidateResponse">
                <xs:sequence>
                    <!-- Validation result - contains information about:
                        <ul>
                            <li>Message ID.</li>
                            <li>Error code of any errors produced during validation process.</li> 
                            <li>Detailed error message, if any. </li>
                        </ul> -->
                    <xs:element name="validationResult" type="tns:callResult" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageValidateMany">
                <xs:sequence>
                    <!-- List of prepared message IDs to be validated. -->
                    <xs:element name="messageIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageValidateManyResponse">
                <xs:sequence>
                    <!-- Validation result list. Each result contains information about:
                                <ul>
        	                        <li>Message ID.</li>
        	                    	<li>Error code of any errors produced during validation process.</li> 
        	                    	<li>Detailed error message, if any.</li>
                            	</ul> -->
                    <xs:element name="validationResults" type="tns:callResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetStatistics">
                <xs:sequence>
                    <!-- ID of the message to retrieve statistics for. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetStatisticsResponse">
                <xs:sequence>
                    <!-- A MessageStatistics object holding some basic information about the message and the statistical
                        values of the message. -->
                    <xs:element name="msgStatistics" type="tns:messageStatistics" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetStatisticsByExternalMessageId">
                <xs:sequence>
                    <!-- External ID of the message to get the statistics for. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetStatisticsByExternalMessageIdResponse">
                <xs:sequence>
                    <!-- A MessageStatistics object holding some basic information about the message and the statistical
                        values of the message. -->
                    <xs:element name="msgStatistics" type="tns:messageStatistics" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageFind">
                <xs:sequence>
                    <!-- Object specifying how to filter the list of returned MessageSummary objects. -->
                    <xs:element name="filter" type="tns:messageFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageFindResponse">
                <xs:sequence>
                    <!-- List of MessageSummary objects providing summary information suitable for 
						 identifying/listing outbox messages. -->
                    <xs:element name="messageSummary" type="tns:messageSummary" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetTimeDistribution">
                <xs:sequence>
                    <!-- ID of the message to retrieve statistics time
						distribution information for. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Enumerated type object defining what intervals the
						message statistics KPIs shall be aggregated to - either daily or
						hourly -->
                    <xs:element name="interval" type="tns:timeDistributionInterval" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetTimeDistributionResponse">
                <xs:sequence>
                    <!-- A MessageTimeDistribution object containing information about the
						message and a list of MessageTimeDistributionPeriod objects. -->
                    <xs:element name="messageTimeDistribution" type="tns:messageTimeDistribution" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetTimeDistributionByExternalMessageId">
                <xs:sequence>
                    <!-- ID of the message to retrieve statistics time
						distribution information for. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Enumerated type object defining what intervals the
						message statistics KPIs shall be aggregated to - either daily or
						hourly -->
                    <xs:element name="interval" type="tns:timeDistributionInterval" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="messageGetTimeDistributionByExternalMessageIdResponse">
                <xs:sequence>
                    <!-- A MessageTimeDistribution object containing information about the
						message and a list of MessageTimeDistributionPeriod objects. -->
                    <xs:element name="messageTimeDistribution" type="tns:messageTimeDistribution" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageFind">
                <xs:sequence>
                    <!-- The landingpage filter containing the match criteria for landingpages. -->
                    <xs:element name="landingpageFilter" type="tns:landingpageFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageFindResponse">
                <xs:sequence>
                    <!-- A list of result objects. Each object contains summary information for that particular
                        landing page. -->
                    <xs:element name="results" type="tns:landingpageSummary" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageGetStatus">
                <xs:sequence>
                    <!-- ID of the landing page to be used. -->
                    <xs:element name="landingpageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageGetStatusResponse">
                <xs:sequence>
                    <!-- Current status of the landing page, as identified by landing page ID. -->
                    <xs:element name="status" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageDelete">
                <xs:sequence>
                    <!-- The DMC ID of the landing page to be deleted. -->
                    <xs:element name="landingpageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="landingpageDeleteMany">
                <xs:sequence>
                    <!-- The eC-messenger IDs list of the landing pages to be deleted. -->
                    <xs:element name="landingpageIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="landingpageDeleteManyResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="cmsGetMessageDefinitions">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="cmsGetMessageDefinitionsResponse">
                <xs:sequence>
                    <!-- The single CMS message and its properties. -->
                    <xs:element name="cmsMessageDefinitions" type="tns:cmsMessageDefinition" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="cmsGetMimeMessage">
                <xs:sequence>
                    <!-- The ID of the CMS message to be returned. -->
                    <xs:element name="cmsMessageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="cmsGetMimeMessageResponse">
                <xs:sequence>
                    <!-- A CMS message in MIME message format. -->
                    <xs:element name="mimeMessage" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncSubmit">
                <xs:sequence>
                    <!-- Name of the predefined script to execute. -->
                    <xs:element name="topic" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of arguments for the script. -->
                    <xs:element name="arguments" type="tns:attribute" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncSubmitResponse">
                <xs:sequence>
                    <!-- The generated unique item ID of the result for the processed data.
                        This item ID can be used to identify the data during polling items from the result queue. -->
                    <xs:element name="queueId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncListTopics">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="asyncListTopicsResponse">
                <xs:sequence>
                    <!-- A list of topic names -->
                    <xs:element name="topics" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncPoll">
                <xs:sequence>
                    <!-- Name of the topic. -->
                    <xs:element name="topic" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Amount of result items to fetch. -->
                    <xs:element name="limit" type="xs:int" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncPollResponse">
                <xs:sequence>
                    <!-- A list of result objects.
                        This list can be shorter then the requested amount or empty,
                        depending on the job results that are available. -->
                    <xs:element name="results" type="tns:asyncResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetSubmitCount">
                <xs:sequence>
                    <!-- Name of the topic. -->
                    <xs:element name="topic" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetSubmitCountResponse">
                <xs:sequence>
                    <!-- Number of job results that were submitted for the topic. -->
                    <xs:element name="puts" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetPollCount">
                <xs:sequence>
                    <!-- Name of the topic. -->
                    <xs:element name="topic" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetPollCountResponse">
                <xs:sequence>
                    <!-- Number of already polled items. -->
                    <xs:element name="polls" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetRemainingCapacity">
                <xs:sequence>
                    <!-- Name of the topic. -->
                    <xs:element name="topic" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="asyncGetRemainingCapacityResponse">
                <xs:sequence>
                    <!-- Remaining capacity. -->
                    <xs:element name="capacity" type="xs:int" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contentStore">
                <xs:sequence>
                    <!-- The content that has to be created. -->
                    <xs:element name="content" type="tns:attachment" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contentStoreResponse">
                <xs:sequence>
                    <!-- The content store reference of the result. -->
                    <xs:element name="contentReference" type="tns:attachmentReference" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contentDelete">
                <xs:sequence>
                    <!-- The DMC content store ID for the element to be deleted. -->
                    <xs:element name="contentId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contentDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="emailSendMessages">
                <xs:sequence>
                    <!-- A list of messages. -->
                    <xs:element name="messages" type="tns:message" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="emailSendMessagesResponse">
                <xs:sequence>
                    <!-- Report about messages sending. Contains:
                        <ul>
                            <li> Number of mails to be sent.</li>
                    	    <li> Number of mails sent successfully.</li>
                    	    <li> Information about occurred errors, if any.</li>
                    	</ul> -->
                    <xs:element name="sendingResults" type="tns:batchReport" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistCreateGroupEntries">
                <xs:sequence>
                    <!-- The list of blacklist entries to be created. -->
                    <xs:element name="entries" type="tns:blacklistEntry" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistCreateGroupEntriesResponse">
                <xs:sequence>
                    <!-- A list of result objects. Each object corresponds to the specified blacklist entry
                        with the same list position. -->
                    <xs:element name="results" type="tns:createResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistCreateSystemEntries">
                <xs:sequence>
                    <!-- The list of blacklist entries to be created. -->
                    <xs:element name="entries" type="tns:blacklistEntry" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistCreateSystemEntriesResponse">
                <xs:sequence>
                    <!-- A list of result objects. Each object corresponds to the specified blacklist entry with the same list position. -->
                    <xs:element name="results" type="tns:createResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistDeleteGroupEntries">
                <xs:sequence>
                    <!-- The list of blacklist entries to be deleted. -->
                    <xs:element name="entries" type="tns:blacklistEntry" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- The group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistDeleteGroupEntriesResponse">
                <xs:sequence>
                    <!-- A list of result objects. Each object corresponds to the specified blacklist entry with the same list position. -->
                    <xs:element name="results" type="tns:deleteResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistDeleteSystemEntries">
                <xs:sequence>
                    <!-- The list of blacklist entries to be deleted. -->
                    <xs:element name="entries" type="tns:blacklistEntry" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="blacklistDeleteSystemEntriesResponse">
                <xs:sequence>
                    <!-- A list of result objects. Each object corresponds to the specified blacklist entry  with the same list position.. -->
                    <xs:element name="results" type="tns:deleteResult" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageCreate">
                <xs:sequence>
                    <!-- Draft message object specifying data of the draft message which should be created.
                        The ID defined on the draft message object is ignored. -->
                    <xs:element name="draftMessage" type="tns:draftMessage" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageCreateResponse">
                <xs:sequence>
                    <!-- Draft message object representing created draft message. -->
                    <xs:element name="result" type="tns:draftMessage" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageGet">
                <xs:sequence>
                    <!-- The draft message ID. -->
                    <xs:element name="draftMessageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageGetResponse">
                <xs:sequence>
                    <!-- The found draft message. -->
                    <xs:element name="draftMessage" type="tns:draftMessage" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageUpdate">
                <xs:sequence>
                    <!-- Draft message object containing data which should be set on an existing draft message.
                                 The draft message object should have an ID of an existing draft message to be updated. -->
                    <xs:element name="draftMessage" type="tns:draftMessage" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageUpdateResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="draftmessageDelete">
                <xs:sequence>
                    <!-- The ID of the draft to be deleted. -->
                    <xs:element name="draftMessageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="draftmessageFind">
                <xs:sequence>
                    <!-- Object specifying how to filter the list of returned draft message summary objects. -->
                    <xs:element name="filter" type="tns:draftMessageFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="draftmessageFindResponse">
                <xs:sequence>
                    <!-- Objects providing summary information suitable for identifying/listing draft messages. -->
                    <xs:element name="draftSummary" type="tns:draftMessageSummary" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="preparedmessageFind">
                <xs:sequence>
                    <!-- Object specifying how to filter the list of returned PreparedMessageSummary objects. -->
                    <xs:element name="filter" type="tns:preparedMessageFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="preparedmessageFindResponse">
                <xs:sequence>
                    <!-- List of PreparedMessageSummary objects providing summary information suitable for 
						 identifying/listing prepared message templates. -->
                    <xs:element name="preparedMessageSummary" type="tns:preparedMessageSummary" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="relatedDataCreateRecord">
                <xs:sequence>
                    <!-- A valid RelatedDataRecord type containing the data to add a new row. -->
                    <xs:element name="record" type="tns:relatedDataRecord" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="relatedDataCreateRecordResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="relatedDataUpdateRecords">
                <xs:sequence>
                    <!-- A valid RelatedDataRecordAndFilter type containing the new data and an optional filter to select specific records. -->
                    <xs:element name="recordAndFilter" type="tns:relatedDataRecordAndFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="relatedDataUpdateRecordsResponse">
                <xs:sequence>
                    <!-- Number of updated related data records. -->
                    <xs:element name="updateCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="relatedDataDeleteRecords">
                <xs:sequence>
                    <!-- A valild RelatedDataFilter type describing the records to be deleted. -->
                    <xs:element name="filter" type="tns:relatedDataFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="relatedDataDeleteRecordsResponse">
                <xs:sequence>
                    <!-- Number of deleted related data records. -->
                    <xs:element name="deleteCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactCreate">
                <xs:sequence>
                    <!-- A new contact to be created. -->
                    <xs:element name="contact" type="tns:contact" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactCreateResponse">
                <xs:sequence>
                    <!-- The new contact. -->
                    <xs:element name="result" type="tns:contact" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactGet">
                <xs:sequence>
                    <!-- The contact identifier. -->
                    <xs:element name="identifier" type="tns:contactIdentifier" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactGetResponse">
                <xs:sequence>
                    <!-- The contact object. -->
                    <xs:element name="contact" type="tns:contact" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactUpdate">
                <xs:sequence>
                    <!-- The type of identifier to be used for the contact update. -->
                    <xs:element name="identifierType" type="tns:contactIdentifierType" minOccurs="1" maxOccurs="1"/>
                    <!-- A contact to be updated. -->
                    <xs:element name="contact" type="tns:contact" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactUpdateResponse">
                <xs:sequence>
                    <!-- The updated contact. -->
                    <xs:element name="result" type="tns:contact" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactDelete">
                <xs:sequence>
                    <!-- The contact identifier. -->
                    <xs:element name="identifier" type="tns:contactIdentifier" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="contactDeleteResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="processGetDetails">
                <xs:sequence>
                    <!-- The ID of the process for which the information is returned. -->
                    <xs:element name="processId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="processGetDetailsResponse">
                <xs:sequence>
                    <!-- A ProcessDetails object that contains information about the specified process. -->
                    <xs:element name="processDetails" type="tns:processDetails" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="processApplyAction">
                <xs:sequence>
                    <!-- The ID of the process for which the status is changed. -->
                    <xs:element name="processId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The new status applied to the process. 
                        Additional information about valid states for each action is available in the description 
                        for the ProcessAction type. -->
                    <xs:element name="action" type="tns:processAction" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="processApplyActionResponse">
                <xs:sequence>
                    <!-- One of the enumerated values assigned to the ProcessStatus type that represents 
                        the current status of the process. -->
                    <xs:element name="processStatus" type="tns:processStatus" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationFind">
                <xs:sequence>
                    <xs:element name="automationFilter" type="tns:automationFilter" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationFindResponse">
                <xs:sequence>
                    <!-- Current status of the landing page, as identified by landing page ID. -->
                    <xs:element name="automations" type="tns:automationDetails" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationGetDetails">
                <xs:sequence>
                    <xs:element name="automationType" type="tns:automationType" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="automationId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationGetDetailsResponse">
                <xs:sequence>
                    <xs:element name="automationDetails" type="tns:automationDetails" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationRunOnce">
                <xs:sequence>
                    <xs:element name="automationId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationRunOnceResponse">
                <xs:sequence>
                    <xs:element name="runOnceResult" type="tns:runOnceResult" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Result of a topic. -->
            <xs:complexType name="asyncResult">
                <xs:sequence>
                    <!-- ID of the message. -->
                    <xs:element name="queueId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of attributes containing the result information. -->
                    <xs:element name="output" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A message attachment. -->
            <xs:complexType name="attachment">
                <xs:sequence>
                    <!-- The name of the attachment. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attachment content type. -->
                    <xs:element name="contentType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attachment content in base64 encoding. -->
                    <xs:element name="content" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- References content to be attached to the message. -->
            <xs:complexType name="attachmentReference">
                <xs:sequence>
                    <!-- The ID of the content store element. -->
                    <xs:element name="contentId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- This string is used to point to the image attachment inside the email.
                It will become the mime ID of the attachment. -->
                    <xs:element name="reference" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An arbitrary attribute that the various objects have assigned. -->
            <xs:complexType name="attribute">
                <xs:sequence>
                    <!-- The name of the given attribute. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The value of the given attribute. Note that although provided here as a string, it might have to be converted
                into a specific type in the given call. Errors can occur if that is not possible. -->
                    <xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A descriptor object for user-defined attributes. -->
            <xs:complexType name="attributeDefinition">
                <xs:sequence>
                    <!-- The attribute name. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The attribute type. -->
                    <xs:element name="type" type="tns:attributeType" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of allowed values set that defines an enumeration. Interpreted as values with
                the type of attributeDefinition. -->
                    <xs:element name="enumerationValues" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- The attributeDefinition can be set to true to activate, or false to archive. -->
                    <xs:element name="active" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Data type of the values. -->
            <xs:simpleType name="attributeType">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="BOOLEAN"/>
                    <xs:enumeration value="DATE"/>
                    <xs:enumeration value="NUMBER"/>
                    <xs:enumeration value="STRING"/>
                </xs:restriction>
            </xs:simpleType>
            <xs:complexType name="automationDetails">
                <xs:sequence>
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="description" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="automationType" type="tns:automationType" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="jobType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="eventType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="ownerName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="nextExecutionDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="endDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="dateOfLastError" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="causeOfLastError" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="executionsCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="status" type="tns:automationStatus" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="archived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="automationFilter">
                <xs:sequence>
                    <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="automationType" type="tns:automationType" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="jobType" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="eventType" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="ownerName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="nextExecutionDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="nextExecutionDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="endDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="endDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="hasErrors" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="status" type="tns:automationStatus" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="archived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:simpleType name="automationStatus">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="ACTIVE_RUNNING"/>
                    <xs:enumeration value="ACTIVE_SCHEDULED"/>
                    <xs:enumeration value="INACTIVE"/>
                    <xs:enumeration value="INACTIVE_DEACTIVATED"/>
                    <xs:enumeration value="INACTIVE_DONE"/>
                </xs:restriction>
            </xs:simpleType>
            <xs:simpleType name="automationType">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="EVENT_BASED"/>
                    <xs:enumeration value="TIME_BASED"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Report about execution of batch processing job.
            Contains summary about the job execution and detailed information about occurred errors (if any). -->
            <xs:complexType name="batchReport">
                <xs:sequence>
                    <!-- Count of entities passed for processing. -->
                    <xs:element name="batchSize" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Count of entities processed successfully. -->
                    <xs:element name="succeededCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of errors occurred by processing. -->
                    <xs:element name="errors" type="tns:callResult" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Base type for results returned from batch operations. -->
            <xs:complexType name="batchResult">
                <xs:sequence>
                    <!-- A status flag which is set to <code>true</code> if the operation completed successfully. -->
                    <xs:element name="success" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- The id of the object. This property is only set if the operation completed successfully. 
                That is, if the <code>success</code> property is <code>true</code>. -->
                    <xs:element name="id" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic processing but provides human readable error information. -->
                    <xs:element name="errorMessage" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A blacklist entry. -->
            <xs:complexType name="blacklistEntry">
                <xs:sequence>
                    <!-- Specifies the entry type. -->
                    <xs:element name="type" type="tns:blacklistEntryType" minOccurs="1" maxOccurs="1"/>
                    <!-- The pattern to be blacklisted. Depending on the type property, this may be an email address,an email domain or a phone number. -->
                    <xs:element name="pattern" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Specifies the type of a blacklist entry. -->
            <xs:simpleType name="blacklistEntryType">
                <xs:restriction base="xs:string">
                    <!-- A single email address. -->
                    <xs:enumeration value="EMAIL"/>
                    <!-- An email domain. Entries of this type match all email addresses from the specified email domain. -->
                    <xs:enumeration value="EMAIL_DOMAIN"/>
                    <!-- A phone number. -->
                    <xs:enumeration value="PHONE_NUMBER"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- An object carrying information about result of an API call for a given entity. -->
            <xs:complexType name="callResult">
                <xs:sequence>
                    <!-- Identifier of given entity (e.g. message ID, group ID, name or index... ). -->
                    <xs:element name="entityKey" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A short information code - mostly error code. -->
                    <xs:element name="code" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Detailed information - error message. -->
                    <xs:element name="message" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Contains information about related CMS message. -->
            <xs:complexType name="cmsMessageDefinition">
                <xs:sequence>
                    <!-- ID of the CMS message. -->
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- ID of the super group. -->
                    <xs:element name="superGroupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- ID of the master template. -->
                    <xs:element name="ownerId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- ID of the master template. -->
                    <xs:element name="masterId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Location where the master template is saved. -->
                    <xs:element name="masterLocation" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the message created via CMS. -->
                    <xs:element name="description" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- External ID. This ID used to add information-containing parameters to links within the message. The links need to be modified to automatically transfer the values entered for the external ID. -->
                    <xs:element name="externalId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Subject of the message created via CMS. -->
                    <xs:element name="subject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Date when the message will be sent. -->
                    <xs:element name="dueDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Date on which the CMS message was created. -->
                    <xs:element name="creationDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Encoding of the message created via CMS. -->
                    <xs:element name="encoding" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A currently active CMS message. Active CMS messages can be previewed, edited and sent. -->
                    <xs:element name="active" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- A currently archived CMS message. Archived CMS messages can only be previewed (not edited or sent). -->
                    <xs:element name="archived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An object representing a DMC contact, including any set identifiers and any set attributes. One of the following is mandatory to be provided with the valid value: emailAddress, mobileNumber or applicationAlias. -->
            <xs:complexType name="contact">
                <xs:sequence>
                    <!-- The identifier of the contact. -->
                    <xs:element name="contactId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- A contact may have an email address. It has to be unique in the system. -->
                    <xs:element name="emailAddress" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A contact may have a mobile number. It has to be unique in the system. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A contact may have an application alias. It has to be unique in the system. -->
                    <xs:element name="applicationAlias" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A contact may have an identifier generated by an external system. -->
                    <xs:element name="identifier" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of attributes. -->
                    <xs:element name="attributes" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An object wrapping contact identifier with it's value. -->
            <xs:complexType name="contactIdentifier">
                <xs:sequence>
                    <!-- A type of identifier. -->
                    <xs:element name="type" type="tns:contactIdentifierType" minOccurs="1" maxOccurs="1"/>
                    <!-- A value of the contact identifier. -->
                    <xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Contact identifier. -->
            <xs:simpleType name="contactIdentifierType">
                <xs:restriction base="xs:string">
                    <!-- Application alias. -->
                    <xs:enumeration value="APP_ALIAS"/>
                    <!-- Email address. -->
                    <xs:enumeration value="EMAIL"/>
                    <!-- External identifier. -->
                    <xs:enumeration value="EXTERNAL"/>
                    <!-- Identifier. -->
                    <xs:enumeration value="ID"/>
                    <!-- Mobile number. -->
                    <xs:enumeration value="MOBILE"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- An object that describes whether the corresponding blacklist entry has been added to the system or not. -->
            <xs:complexType name="createResult">
                <xs:sequence>
                    <!-- A status flag which is set to <code>true</code> if the operation completed successfully. -->
                    <xs:element name="success" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- The id of the object. This property is only set if the operation completed successfully. 
                That is, if the <code>success</code> property is <code>true</code>. -->
                    <xs:element name="id" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic processing but provides human readable error information. -->
                    <xs:element name="errorMessage" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An object that describes whether the corresponding blacklist entry has been deleted from the system or not.. -->
            <xs:complexType name="deleteResult">
                <xs:sequence>
                    <!-- A status flag which is set to <code>true</code> if the operation completed successfully. -->
                    <xs:element name="success" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- The id of the object. This property is only set if the operation completed successfully. 
                That is, if the <code>success</code> property is <code>true</code>. -->
                    <xs:element name="id" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic processing but provides human readable error information. -->
                    <xs:element name="errorMessage" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A message in progress that is saved in the system but which has not been sent or scheduled.
            Editing of the draft message can be resumed at a later time, or the draft can be used as a template for other messages.
            A draft is not assigned to a specific group. -->
            <xs:complexType name="draftMessage">
                <xs:sequence>
                    <!-- Draft message id -->
                    <xs:element name="id" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Draft message name -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- External ID. This ID used to add information-containing parameters to links within the message.
                The links need to be modified to automatically transfer the values entered for the external ID. -->
                    <xs:element name="externalId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category id. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Object containing message content and content-related properties. -->
                    <xs:element name="message" type="tns:messageBase" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object Specifying how to filter the list of returned drafted message summary object. -->
            <xs:complexType name="draftMessageFilter">
                <xs:sequence>
                    <!-- External message ID -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author name. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author ID. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation from date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation to date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Last update from date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Last update to date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object providing summary information suitable for identifying/listing outbox
        		messages and prepared message templates. -->
            <xs:complexType name="draftMessageSummary">
                <xs:sequence>
                    <!-- Author ID. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Author Name in format lastname, firstname. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- External message ID. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message ID -->
                    <xs:element name="id" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message is archived. -->
                    <xs:element name="isArchived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- Last update date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:simpleType name="errorActor">
                <xs:restriction base="xs:string">
                    <!-- The client who issued the request. -->
                    <xs:enumeration value="CLIENT"/>
                    <!-- The server. -->
                    <xs:enumeration value="SERVER"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- The complete list of error codes returned by the API. -->
            <xs:simpleType name="errorCode">
                <xs:restriction base="xs:string">
                    <!-- Name of the attribute that is archived. -->
                    <xs:enumeration value="ARCHIVED_ATTRIBUTE"/>
                    <!-- The user or the email domain is blacklisted. -->
                    <xs:enumeration value="BLACKLISTED"/>
                    <xs:enumeration value="INCORRECT_STATUS"/>
                    <!-- Name of the attribute that generates an error. -->
                    <xs:enumeration value="INVALID_ATTRIBUTE"/>
                    <!-- Value of the attribute that generates an error. -->
                    <xs:enumeration value="INVALID_ATTRIBUTE_VALUE"/>
                    <xs:enumeration value="INVALID_JOB_ARGUMENT"/>
                    <xs:enumeration value="INVALID_JOB_DEFINITION_ID"/>
                    <!-- A parameter value is invalid. -->
                    <xs:enumeration value="INVALID_PARAMETER"/>
                    <!-- The request could not be processed. Please check the error detail message. -->
                    <xs:enumeration value="INVALID_REQUEST"/>
                    <!-- The maximum number of custom user attributes has been reached. No further attributes can be created. -->
                    <xs:enumeration value="MAXIMUM_ATTRIBUTE_COUNT_EXCEEDED"/>
                    <xs:enumeration value="MAXIMUM_SIZE_EXCEEDED"/>
                    <xs:enumeration value="MISSING_JOB_ARGUMENT"/>
                    <!-- A mandatory parameter is missing. -->
                    <xs:enumeration value="MISSING_PARAMETER"/>
                    <!-- There is no attribute with the given name. -->
                    <xs:enumeration value="NO_SUCH_ATTRIBUTE"/>
                    <!-- An object reference points to an object which does not exist any more. -->
                    <xs:enumeration value="NO_SUCH_OBJECT"/>
                    <!-- An object to be created already exists. -->
                    <xs:enumeration value="OBJECT_ALREADY_EXISTS"/>
                    <!-- This operation is disabled for this system. -->
                    <xs:enumeration value="OPERATION_DISABLED"/>
                    <!-- The user operating the API does not have the required permission. -->
                    <xs:enumeration value="PERMISSION_DENIED"/>
                    <!-- An unexpected backend error has occurred. -->
                    <xs:enumeration value="UNEXPECTED_ERROR"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- The object that describes the main properties of a group. -->
            <xs:complexType name="group">
                <xs:sequence>
                    <!-- Internal ID of the group. -->
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the group. The name must be unique in the system. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A description of the group. -->
                    <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Email for the group clone. The email must be unique and valid. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object for description of how to clone a given group and mandatory fields for the cloned group. -->
            <xs:complexType name="groupCloneOptions">
                <xs:sequence>
                    <!-- Name of the group clone. The name must be unique in the system. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Description for the group clone. -->
                    <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Email for the group clone. The email must be unique and valid. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- If true, the group will be cloned with all prepared messages otherwise without prepared messages. -->
                    <xs:element name="includePreparedMessages" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- If true, group will be cloned with the test users
                    <br/> otherwise without them. -->
                    <xs:element name="includeTestUsers" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A collection of group settings. -->
            <xs:complexType name="groupSettingsTemplate">
                <xs:sequence>
                    <!-- Every template has a unique ID within the system. -->
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the template. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Filter object that is used for searching after landingpages. -->
            <xs:complexType name="landingpageFilter">
                <xs:sequence>
                    <!-- Status of the landingpage. -->
                    <xs:element name="status" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the landing page. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Public name of the landing page. -->
                    <xs:element name="pageName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Owner id of the landingpage. -->
                    <xs:element name="ownerId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- URL of the landingpage. -->
                    <xs:element name="URL" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Start of time interval (ISO 8601 format) in which the landing page was published. -->
                    <xs:element name="publishedFrom" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- End of time interval (ISO 8601)  in which the landing page was published. -->
                    <xs:element name="publishedTo" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object that contains summary information about landingpage. -->
            <xs:complexType name="landingpageSummary">
                <xs:sequence>
                    <!-- Id of the landignpage. -->
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Status of the landignpage. -->
                    <xs:element name="status" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the landing page. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Public name of the landing page. -->
                    <xs:element name="pageName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Owner id of the landingpage. -->
                    <xs:element name="ownerId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Description of the landingpage. -->
                    <xs:element name="description" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- URL of the landingpage. -->
                    <xs:element name="URL" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Redirection of the landingpage. -->
                    <xs:element name="redirection" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Expiration date of landing page in format ISO 8601. -->
                    <xs:element name="expirationDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Publishing date of the existing landingpage. -->
                    <xs:element name="publishedDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Last publishing date of the existing landingpage. -->
                    <xs:element name="lastPublishedDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Entity representing a link category. -->
            <xs:complexType name="linkCategory">
                <xs:sequence>
                    <!-- Internal ID of the link category. -->
                    <xs:element name="id" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- The name of the link category. -->
                    <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A further description of the link category. -->
                    <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Regex pattern that will be applied to identify a link that matches this category. -->
                    <xs:element name="pattern" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- This object represents the relationship between a user and a group. -->
            <xs:complexType name="membership">
                <xs:sequence>
                    <!-- The ID of the user who is a member of a group.. -->
                    <xs:element name="userId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the group to which the member belongs. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The member attributes for this user in the group. -->
                    <xs:element name="attributes" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A result object for attributes changes. -->
            <xs:complexType name="mergeResult">
                <xs:sequence>
                    <!-- The attribute name. -->
                    <xs:element name="attributeName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Action that was performed. -->
                    <xs:element name="result" type="tns:mergeResultType" minOccurs="1" maxOccurs="1"/>
                    <!-- Error code the error produced (if any). -->
                    <xs:element name="error" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Types of the MergeResult -->
            <xs:simpleType name="mergeResultType">
                <xs:restriction base="xs:string">
                    <!-- Activated - attribute was created or archived before. -->
                    <xs:enumeration value="ACTIVATED"/>
                    <!-- Archived   - Attribute was active or archived before. -->
                    <xs:enumeration value="ARCHIVED"/>
                    <!-- Created. -->
                    <xs:enumeration value="CREATED"/>
                    <!-- An enumeration value has been added to an existing attribute. -->
                    <xs:enumeration value="ENUM_EXTENDED"/>
                    <!-- Error  - an error occurred during operation. Error details are described in the corresponding error string. -->
                    <xs:enumeration value="ERROR"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Information for a complete Message sent by eC-messenger.
            Depending on the provided parts, a simple mime message (text or html part), 
            a multipart alternative mime message (text and html) or 
            a multipart-mixed mime message or 
            any suitable combination might be produced. -->
            <xs:complexType name="message">
                <xs:sequence>
                    <!-- The From email address (RFC-822 format). In API older than version 6, including of recipient name is not allowed (format is restricted to "localpart@domain"). -->
                    <xs:element name="from" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The To email address (RFC-822 format) or comma-separated list of email addresses. In API older than version 6, only single email of format "localpart@domain" allowed. -->
                    <xs:element name="to" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The CC email address (RFC-822 format) or comma-separated list of email addresses -->
                    <xs:element name="cc" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The BCC email address (RFC-822 format) or comma-separated list of email addresses -->
                    <xs:element name="bcc" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The Reply-To email address (RFC-822 format). In API older than version 6, only single email of format "localpart@domain" allowed. -->
                    <xs:element name="replyTo" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Additional headers that should be added to the message. -->
                    <xs:element name="headers" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- The message subject. -->
                    <xs:element name="subject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The text body part of the message. -->
                    <xs:element name="textBody" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The HTML body part of the message. -->
                    <xs:element name="htmlBody" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Image and attachment references (content store). -->
                    <xs:element name="attachmentReferences" type="tns:attachmentReference" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- List of attachments. -->
                    <xs:element name="attachments" type="tns:attachment" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object representing message content and content-related settings.
            The MessageBase object is meant to be context agnostic
            (no information about addressing, DB keys, sendout details etc.)
            The MessageBase in intended to be embedded in wrapper objects which define the context needed. -->
            <xs:complexType name="messageBase">
                <xs:sequence>
                    <!-- The message subject. -->
                    <xs:element name="subject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The text body part of the message. -->
                    <xs:element name="emailBodyText" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The HTML body part of the message. -->
                    <xs:element name="emailBodyHtml" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The text from SMS message. -->
                    <xs:element name="smsText" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The text from fax message. -->
                    <xs:element name="faxText" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Additional headers that will be added to the email message. -->
                    <xs:element name="emailHeaders" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- List of attachments. -->
                    <xs:element name="attachments" type="tns:attachment" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- Image and attachment references (content store). -->
                    <xs:element name="attachmentReferences" type="tns:attachmentReference" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- Specifies the encoding of the message. If not specified - default encoding will be used. -->
                    <xs:element name="encoding" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Specifies the encoding used to transmit the message from DMC to the cellular network.
                    The actual encoding used to send the SMS message is based on definitions used for cellular communication:
                    <ul>
                        <li>Messages transmitted with ISO-8859-1 are sent with GSM 7-bit encoding.</li>
                        <li>Messages transmitted with UTF-8 are sent with 16-bit encoding.</li>
                    </ul>
                    If not specified - default encoding will be used. -->
                    <xs:element name="encodingSMS" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Defines how images are embedded in the message.
                 <br/> Possible options:
                        <ul>
                            <li>
                                <b>"none"</b> - Images are left untouched: This item leaves the tags (addresses) of the images unchanged.
                                The images are loaded from the provided address. This setting is used when additional information is included in the link, for example, in the form of a tracking pixel.
                                <br/><b>this is default option.</b>
                            </li>
                            <li>
                                <b>"inline"</b> - Images are inlined into the message (Offline HTML):
                                The images are included as inline attachments in the email.
                                DMC accesses the pictures from the location where they are saved (HTTP or HTTPS address)
                                and includes them in the email. Afterward, the addresses of the pictures in the message
                                (HTML tags) are updated to refer to the inline attachments.
                                The images included in the message do not have to be loaded from an external address.
                                The message recipient does not have to be online to view the images in the message.
                            </li>
                            <li>
                                <b>"host"</b> - Images are hosted on the DMC servers (Online HTML):
                                The images are not provided from their original servers,
                                they are uploaded to the DMC servers and linked from there.
                                Flash movies (*.swf) in the HTML and Flash HTML fields in the message are treated as images.
                                It is not possible to inline files with these formats.
                                The flash movies are specified with a specially formatted &lt;object&gt;-block.
                            </li>
                        </ul>
                        If not specified - default mode will be used. -->
                    <xs:element name="imageHandlingMode" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Additional message content for personalization. -->
            <xs:complexType name="messageContent">
                <xs:sequence>
                    <!-- List of attributes that can be used to further personalize the sendout. These values are accessible
                by a "param" placeholder. -->
                    <xs:element name="parameters" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- A list of attachments. -->
                    <xs:element name="attachments" type="tns:attachment" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object Specifying how to filter the list of returned message summary object. -->
            <xs:complexType name="messageFilter">
                <xs:sequence>
                    <!-- External message ID -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author name. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author Identification. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group name. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category name. -->
                    <xs:element name="groupCategoryName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category ID. -->
                    <xs:element name="groupCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- The type of the message as seen on the processed messages overview/outbox page. -->
                    <xs:element name="type" type="tns:messageType" minOccurs="0" maxOccurs="1"/>
                    <!-- The status of a message as seen on processed messages overview/outbox page. -->
                    <xs:element name="status" type="tns:messageStatus" minOccurs="0" maxOccurs="1"/>
                    <!-- Sendout from date as Strings and in ISO 8601 format. -->
                    <xs:element name="sendoutDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Sendout to date as Strings and in ISO 8601 format. -->
                    <xs:element name="sendoutDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- MessageHistory object containing details about a single message sent to the user. -->
            <xs:complexType name="messageHistory">
                <xs:sequence>
                    <!-- The message id of the message that has been sent to the user. -->
                    <xs:element name="messageID" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The external transaction id for that particular send of this message to this user, if defined. -->
                    <xs:element name="externalTransactionId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The external message id of the message, if defined. -->
                    <xs:element name="externalMessageID" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the message. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The subject line of the message, in non-personalized form. -->
                    <xs:element name="messageSubject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The group id of the group from which the message was sent. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the group from which the message was sent. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The group email of the group from which the message was sent. -->
                    <xs:element name="groupEmail" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Date and time the message was sent. -->
                    <xs:element name="sendDate" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The message type the message was sent as. -->
                    <xs:element name="messageType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The status of the message, either Sent or Skipped. -->
                    <xs:element name="status" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Click status for that message send and user, either true (user clicked that message in that send) or false (user did not click that message in that send, yet). -->
                    <xs:element name="clicked" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- Opened status for that message send and user, either true (user opened that message in that send) or false (user did not open that message in that send, yet). -->
                    <xs:element name="opened" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Metrics and KPIs for a sent message. -->
            <xs:complexType name="messageStatistics">
                <xs:sequence>
                    <!-- Id of the message. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the message. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Subject of the message. -->
                    <xs:element name="messageSubject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Message id assigned by the customer. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Id of the group the message is related to. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the group the message is related to. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Size of the group the message is related to. -->
                    <xs:element name="groupSize" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Start date of the sendout. -->
                    <xs:element name="sendoutStartDate" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- End date of the sendout. -->
                    <xs:element name="sendoutEndDate" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the selection if any were used. -->
                    <xs:element name="selectionName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of attributes holding the KPIs of the message. -->
                    <xs:element name="statisticValues" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- The status of a message as seen on processed messages overview/outbox page. -->
            <xs:simpleType name="messageStatus">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="CANCELLED"/>
                    <xs:enumeration value="INTERUPTED"/>
                    <xs:enumeration value="MODERATED"/>
                    <xs:enumeration value="PROCESSED"/>
                    <xs:enumeration value="PROCESSING"/>
                    <xs:enumeration value="READY"/>
                    <xs:enumeration value="SCHEDULED"/>
                    <xs:enumeration value="SENT"/>
                    <xs:enumeration value="TRANSPORTING"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Object providing summary information suitable for identifying/listing outbox
        		messages and prepared message templates. -->
            <xs:complexType name="messageSummary">
                <xs:sequence>
                    <!-- Author ID. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Author Name in format lastname, firstname. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- External message ID. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category ID. -->
                    <xs:element name="groupCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message ID -->
                    <xs:element name="id" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message is archived. -->
                    <xs:element name="isArchived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- System generated message. -->
                    <xs:element name="isSystemMessage" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Original message ID. -->
                    <xs:element name="originalMessageId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Sendout date as Strings and in ISO 8601 format. -->
                    <xs:element name="sendoutDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The status of a message as seen on processed messages overview/outbox page. -->
                    <xs:element name="status" type="tns:messageStatus" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- The type of the message as seen on the processed messages overview/outbox page. -->
                    <xs:element name="type" type="tns:messageType" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object for retrieving basic message properties and statsitics time
			distribution information for sent group and single messages. -->
            <xs:complexType name="messageTimeDistribution">
                <xs:sequence>
                    <!-- Id of the message. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the message. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Subject of the message. -->
                    <xs:element name="messageSubject" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Name of the group the message is related to. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Sendout start date. -->
                    <xs:element name="sendout" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="confirmedOpens" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="confirmedOpeners" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="totalClicks" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="clickers" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="acceptedMessages" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="messagesOpened" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="messagesClicked" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="timeFrameStart" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="timeFrameEnd" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- Enumerated type object defining what intervals the message statistics KPIs shall be aggregated to - either daily or hourly. -->
                    <xs:element name="interval" type="tns:timeDistributionInterval" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of MessageTimeDistributionPeriod objects describing message statistics data points pertaining to a specific time periods within the time frame. -->
                    <xs:element name="periods" type="tns:messageTimeDistributionPeriod" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object for retrieving message statsitics time distribution information pertaining to a specific time period. -->
            <xs:complexType name="messageTimeDistributionPeriod">
                <xs:sequence>
                    <!-- Id of the message. -->
                    <xs:element name="messageId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="periodStart" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="periodEnd" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of Attribute objects describing message statistics data aggregated to the time period. -->
                    <xs:element name="statisticValues" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- The type of the message as seen on the processed messages overview/outbox page. -->
            <xs:simpleType name="messageType">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="NORMAL"/>
                    <xs:enumeration value="SINGLE"/>
                    <xs:enumeration value="SPLIT_MAIN"/>
                    <xs:enumeration value="SPLIT_TEST"/>
                    <xs:enumeration value="SUB"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Object Specifying how to filter the list of returned prepared message template objects. -->
            <xs:complexType name="preparedMessageFilter">
                <xs:sequence>
                    <!-- External message ID -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author name. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Author ID. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group name. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group name. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category name. -->
                    <xs:element name="groupCategoryName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category ID. -->
                    <xs:element name="groupCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation from date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation to date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Last update from date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDateFrom" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Last update to date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDateTo" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object providing summary information suitable for identifying/listing 
        		prepared message templates. -->
            <xs:complexType name="preparedMessageSummary">
                <xs:sequence>
                    <!-- Author ID. -->
                    <xs:element name="authorId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Author Name in format lastname, firstname. -->
                    <xs:element name="authorName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Creation date as Strings and in ISO 8601 format. -->
                    <xs:element name="creationDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- External message ID. -->
                    <xs:element name="externalMessageId" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category ID. -->
                    <xs:element name="groupCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group category name. -->
                    <xs:element name="groupCategoryName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Group ID. -->
                    <xs:element name="groupId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Group name. -->
                    <xs:element name="groupName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message ID -->
                    <xs:element name="id" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message is archived. -->
                    <xs:element name="isArchived" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- System generated message. -->
                    <xs:element name="isSystemMessage" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
                    <!-- Last update date as Strings and in ISO 8601 format. -->
                    <xs:element name="lastUpdateDate" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Message category ID. -->
                    <xs:element name="messageCategoryId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <!-- Message name. -->
                    <xs:element name="messageName" type="xs:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Subject line. -->
                    <xs:element name="subjectLine" type="xs:string" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An enumerated type that represents an action that
can be applied to a running process. -->
            <xs:simpleType name="processAction">
                <xs:restriction base="xs:string">
                    <!-- Permanently stops work on a paused process.
Can only be applied to a process with the status value <code>PAUSED</code>.
Work cannot be resumed on a cancelled process. -->
                    <xs:enumeration value="CANCEL"/>
                    <!-- Temporarily halts work on a process. 
Can only be applied to a process with the status value <code>PROCESSING</code>.
It is possible to resume work on a paused process. -->
                    <xs:enumeration value="PAUSE"/>
                    <!-- Continues work on a process that is paused. 
Can only be applied to a process with the status value <code>PAUSED</code>. -->
                    <xs:enumeration value="RESUME"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- An object that contains detailed information about a process. -->
            <xs:complexType name="processDetails">
                <xs:sequence>
                    <!-- The ID of the process for which the information is returned. -->
                    <xs:element name="processId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the entity that the process executes.
                A name is assigned to each entity by an individual user or by the system when the entity is created. 
                The name provides additional information about the task that is performed. -->
                    <xs:element name="processName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The kind of entity the process executes. -->
                    <xs:element name="entityType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The unique identification number that the system automatically assigns to each entity. -->
                    <xs:element name="entityId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- An enumerated type that represents the current status of a process. -->
                    <xs:element name="status" type="tns:processStatus" minOccurs="1" maxOccurs="1"/>
                    <!-- The number of chunks on which work is successfully completed. -->
                    <xs:element name="processedCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The entire number of chunks in the process (i.e. the number of chunks that the work 
                of the process is divided into). -->
                    <xs:element name="totalCount" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The date and time the process began. -->
                    <xs:element name="startDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The date and time that a process is
                expected to be finished (if an estimate is
                available). -->
                    <xs:element name="estimatedEndDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The date and time that the process was completed. -->
                    <xs:element name="endDate" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The length of time the process runs in hours, minutes and seconds. -->
                    <xs:element name="duration" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the user that created the entity that is executed in the process.
Provided in the format <code>&lt;LastName&gt;</code>, <code>&lt;FirstName&gt;</code>. -->
                    <xs:element name="executorName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The email address of the user who created
                the entity that is executed in the process. -->
                    <xs:element name="executorEmail" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- If an error causes the execution of a
                process to fail, this property contains information
                about the kind of error that occurred. -->
                    <xs:element name="error" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <xs:simpleType name="processingType">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="ASYNC"/>
                    <xs:enumeration value="SYNC"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Data type of the values. -->
            <xs:simpleType name="processStatus">
                <xs:restriction base="xs:string">
                    <!-- Work for this process has ended.
This process could not be successfully completed. -->
                    <xs:enumeration value="FAILED"/>
                    <!-- All work for this process is successfully completed. -->
                    <xs:enumeration value="FINISHED"/>
                    <!-- Work for this process is temporarily halted.
Work on this process can be resumed. -->
                    <xs:enumeration value="PAUSED"/>
                    <!-- The process is currently running. -->
                    <xs:enumeration value="PROCESSING"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Object for flitering the records to be selected by related data methods. If filter attributes are provided, only records with matching values for all column/value pairs are selected. -->
            <xs:complexType name="relatedDataFilter">
                <xs:sequence>
                    <!-- Name of the related data set. All related data records reside within a data set identified by a unique name. -->
                    <xs:element name="datasetName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Key defining which record(s) to select from the data set. -->
                    <xs:element name="key" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Optional list of Attribute objects used for filtering which records to select. Each Attribute object represents a column name and the desired value the records need to have in that column in order to be selected. All other records are filtered from the result set. Providing a filter is used to prevent an operation to be carried out on all records with the same key in a dataset defined with non-unique keys, e.g. when updating a specific order when order history is stored with email address as keys. -->
                    <xs:element name="filter" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object that contains a Related Data record. -->
            <xs:complexType name="relatedDataRecord">
                <xs:sequence>
                    <!-- Name of the related data set. All related data records reside within a data set identified by a unique name. -->
                    <xs:element name="datasetName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Key defining which record(s) to select from the related data set. -->
                    <xs:element name="key" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Data values to be written to one or more related data records by providing pairs of column names and values to be written into each column. The vehicle is the type Attribute, which is also used to transport information about other name/value pairs, e.g. user attributes. -->
                    <xs:element name="data" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Object containing a related data record and a filter describing which records to select. Used to update rows in a related data set. If filter attributes are provided, only records with matching values for all column/value pairs are selected. -->
            <xs:complexType name="relatedDataRecordAndFilter">
                <xs:sequence>
                    <!-- Name of the related data set in which records will be updated. All related data records reside within a data set identified by a unique name. -->
                    <xs:element name="datasetName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Key defining which record(s) to select from the related data set. -->
                    <xs:element name="key" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A list of Attribute objects describing data values to be written to one or more related data records. Each Attribute object represents a column name and the desired value to be written into that column. Only the subset of columns to be updated needs to be provided. Columns for provided column names not exiting in the dataset will not be created on the fly. -->
                    <xs:element name="data" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- Optional list of Attribute objects used for filtering which related data records to select. Each Attribute object represents a column name and the desired value the records need to have in that column in order to be selected. All other records are filtered from the result set. Providing a filter is used to prevent an operation to be carried out on all records with the same key in a dataset defined with non-unique keys, e.g. when updating a specific order when order history is stored with email address as keys. -->
                    <xs:element name="filter" type="tns:attribute" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- defines a result of running an action once. If the processId is null, there was no process involved -->
            <xs:complexType name="runOnceResult">
                <xs:sequence>
                    <xs:element name="processId" type="xs:long" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="processingType" type="tns:processingType" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Use subscription mode to define the kind of subscription used to add a user to a group. -->
            <xs:simpleType name="subscriptionMode">
                <xs:restriction base="xs:string">
                    <!-- Opt-in subscription with a notification sent to the user. The "Welcome to group" system message is sent. -->
                    <xs:enumeration value="CONFIRMED_OPT_IN"/>
                    <!-- Double opt-in subscription. A confirmation is sent to the user. No notification is sent to the user upon positive response. -->
                    <xs:enumeration value="DOUBLE_OPT_IN"/>
                    <!-- Opt-in subscription. Neither a confirmation nor a notification about joining the group is sent to the user. -->
                    <xs:enumeration value="OPT_IN"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- Object representing entity reference and list of tags belonging to the entity. -->
            <xs:complexType name="taggedEntity">
                <xs:sequence>
                    <!-- Entity type. Available entity types:
                    <ul>
                        <li>Message</li>
                        <li>DraftMessage</li>
                        <li>Group</li>
                    </ul>
                    If not specified - default encoding will be used. -->
                    <xs:element name="entityType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Entity id. -->
                    <xs:element name="entityId" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- List of tags attached to the entity. -->
                    <xs:element name="tags" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Enumerated type object defining what intervals the
			message statistics KPIs shall be aggregated to - either daily or
			hourly. -->
            <xs:simpleType name="timeDistributionInterval">
                <xs:restriction base="xs:string">
                    <!-- Message statistics KPIs aggregated per day. -->
                    <xs:enumeration value="DAILY"/>
                    <!-- Message statistics KPIs aggregated per hour. -->
                    <xs:enumeration value="HOURLY"/>
                </xs:restriction>
            </xs:simpleType>
            <!-- This object represents a single user in the system. A user is typically an
            addressee, a recipient, an opener, etc. -->
            <xs:complexType name="user">
                <xs:sequence>
                    <!-- All users have a unique ID within the system. -->
                    <xs:element name="id" type="xs:long" minOccurs="1" maxOccurs="1"/>
                    <!-- All users in the system must have an email address. The email address must be unique in the system. -->
                    <xs:element name="email" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- A user can have a mobile number. The mobile number must be unique in the system. -->
                    <xs:element name="mobileNumber" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Optionally, a user may have a identifier generated by an external system. -->
                    <xs:element name="identifier" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- The base type for all exceptions representing expected error conditions. -->
            <xs:complexType name="ApiException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An exception that occurs when a asynchronous call fails. -->
            <xs:complexType name="AsyncException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An exception occurred during processing a list of things. When this exception occurrs, all processing ends. -->
            <xs:complexType name="BatchException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- Index of batchElement which occurs the error. -->
                    <xs:element name="index" type="xs:int" minOccurs="1" maxOccurs="1"/>
                    <!-- Explanation of why an error occurred. -->
                    <xs:element name="reason" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An exception returned if an input parameter has an invalid value. -->
            <xs:complexType name="InvalidParameterException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the parameter which is invalid. This is the parameter name used in the API documentation.
                For list parameters, the offset of the invalid element within the list is specified as a suffix.
                The suffix is the list offset (starting with zero for the first element) in square brackets. -->
                    <xs:element name="parameterName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the property containing the invalid value. This only applies to complex types. -->
                    <xs:element name="propertyName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The erroneous value. -->
                    <xs:element name="value" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- A problem occurred with a landing page. -->
            <xs:complexType name="LandingpageException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An exception is returned if an object is not be found with the given property name (ID).
            This can be for different reasons, e.g. the object has ben deleted or propertyName is wrong. -->
            <xs:complexType name="NoSuchObjectException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The object type. -->
                    <xs:element name="objectType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the property used to lookup the object. -->
                    <xs:element name="propertyName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The value of the property used to lookup the object. -->
                    <xs:element name="propertyValue" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- An exception is returned if the object to be created already exists. -->
            <xs:complexType name="ObjectAlreadyExistsException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The object type. -->
                    <xs:element name="objectType" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The name of the property which violates the unique constraint. -->
                    <xs:element name="propertyName" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The value of the property which violates the unique constraint. -->
                    <xs:element name="propertyValue" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- Base type for all exceptions.
            Defines a set of properties which provide basic information about an exception. -->
            <xs:complexType name="ServiceException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
            <!-- The base type for all exceptions representing unexpected error conditions. -->
            <xs:complexType name="UnexpectedErrorException">
                <xs:sequence>
                    <!-- The party which is responsible for the error. -->
                    <xs:element name="errorActor" type="tns:errorActor" minOccurs="1" maxOccurs="1"/>
                    <!-- The error code. -->
                    <xs:element name="errorCode" type="tns:errorCode" minOccurs="1" maxOccurs="1"/>
                    <!-- A detailed error description. Note: the error description is not intended for automatic
                processing but provides human readable error information. -->
                    <xs:element name="message" type="xs:string" minOccurs="1" maxOccurs="1"/>
                    <!-- The ID of the error. -->
                    <xs:element name="errorId" type="xs:string" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
    </types>
    <message name="systemGetApiVersion">
        <part name="parameters" element="tns:systemGetApiVersion"/>
    </message>
    <message name="systemGetApiVersionResponse">
        <part name="parameters" element="tns:systemGetApiVersionResponse"/>
    </message>
    <message name="systemGetEcmVersion">
        <part name="parameters" element="tns:systemGetEcmVersion"/>
    </message>
    <message name="systemGetEcmVersionResponse">
        <part name="parameters" element="tns:systemGetEcmVersionResponse"/>
    </message>
    <message name="metaCreateAttributeDefinitions">
        <part name="parameters" element="tns:metaCreateAttributeDefinitions"/>
    </message>
    <message name="metaCreateAttributeDefinitionsResponse">
        <part name="parameters" element="tns:metaCreateAttributeDefinitionsResponse"/>
    </message>
    <message name="metaGetAttributeDefinitions">
        <part name="parameters" element="tns:metaGetAttributeDefinitions"/>
    </message>
    <message name="metaGetAttributeDefinitionsResponse">
        <part name="parameters" element="tns:metaGetAttributeDefinitionsResponse"/>
    </message>
    <message name="metaArchiveAttributeDefinitions">
        <part name="parameters" element="tns:metaArchiveAttributeDefinitions"/>
    </message>
    <message name="metaArchiveAttributeDefinitionsResponse">
        <part name="parameters" element="tns:metaArchiveAttributeDefinitionsResponse"/>
    </message>
    <message name="metaActivateAttributeDefinitions">
        <part name="parameters" element="tns:metaActivateAttributeDefinitions"/>
    </message>
    <message name="metaActivateAttributeDefinitionsResponse">
        <part name="parameters" element="tns:metaActivateAttributeDefinitionsResponse"/>
    </message>
    <message name="metaMergeAttributeDefinitions">
        <part name="parameters" element="tns:metaMergeAttributeDefinitions"/>
    </message>
    <message name="metaMergeAttributeDefinitionsResponse">
        <part name="parameters" element="tns:metaMergeAttributeDefinitionsResponse"/>
    </message>
    <message name="metaCreateLinkCategories">
        <part name="parameters" element="tns:metaCreateLinkCategories"/>
    </message>
    <message name="metaCreateLinkCategoriesResponse">
        <part name="parameters" element="tns:metaCreateLinkCategoriesResponse"/>
    </message>
    <message name="metaGetLinkCategories">
        <part name="parameters" element="tns:metaGetLinkCategories"/>
    </message>
    <message name="metaGetLinkCategoriesResponse">
        <part name="parameters" element="tns:metaGetLinkCategoriesResponse"/>
    </message>
    <message name="metaUpdateLinkCategory">
        <part name="parameters" element="tns:metaUpdateLinkCategory"/>
    </message>
    <message name="metaUpdateLinkCategoryResponse">
        <part name="parameters" element="tns:metaUpdateLinkCategoryResponse"/>
    </message>
    <message name="metaDeleteLinkCategory">
        <part name="parameters" element="tns:metaDeleteLinkCategory"/>
    </message>
    <message name="metaDeleteLinkCategoryResponse">
        <part name="parameters" element="tns:metaDeleteLinkCategoryResponse"/>
    </message>
    <message name="metaAttachTags">
        <part name="parameters" element="tns:metaAttachTags"/>
    </message>
    <message name="metaAttachTagsResponse">
        <part name="parameters" element="tns:metaAttachTagsResponse"/>
    </message>
    <message name="metaDetachTags">
        <part name="parameters" element="tns:metaDetachTags"/>
    </message>
    <message name="metaDetachTagsResponse">
        <part name="parameters" element="tns:metaDetachTagsResponse"/>
    </message>
    <message name="metaFindByTags">
        <part name="parameters" element="tns:metaFindByTags"/>
    </message>
    <message name="metaFindByTagsResponse">
        <part name="parameters" element="tns:metaFindByTagsResponse"/>
    </message>
    <message name="metaGetTags">
        <part name="parameters" element="tns:metaGetTags"/>
    </message>
    <message name="metaGetTagsResponse">
        <part name="parameters" element="tns:metaGetTagsResponse"/>
    </message>
    <message name="groupClone">
        <part name="parameters" element="tns:groupClone"/>
    </message>
    <message name="groupCloneResponse">
        <part name="parameters" element="tns:groupCloneResponse"/>
    </message>
    <message name="groupGet">
        <part name="parameters" element="tns:groupGet"/>
    </message>
    <message name="groupGetResponse">
        <part name="parameters" element="tns:groupGetResponse"/>
    </message>
    <message name="groupFindIdsByAttributes">
        <part name="parameters" element="tns:groupFindIdsByAttributes"/>
    </message>
    <message name="groupFindIdsByAttributesResponse">
        <part name="parameters" element="tns:groupFindIdsByAttributesResponse"/>
    </message>
    <message name="groupSetAttributes">
        <part name="parameters" element="tns:groupSetAttributes"/>
    </message>
    <message name="groupSetAttributesResponse">
        <part name="parameters" element="tns:groupSetAttributesResponse"/>
    </message>
    <message name="groupGetAttributes">
        <part name="parameters" element="tns:groupGetAttributes"/>
    </message>
    <message name="groupGetAttributesResponse">
        <part name="parameters" element="tns:groupGetAttributesResponse"/>
    </message>
    <message name="groupOverrideGroupSettings">
        <part name="parameters" element="tns:groupOverrideGroupSettings"/>
    </message>
    <message name="groupOverrideGroupSettingsResponse">
        <part name="parameters" element="tns:groupOverrideGroupSettingsResponse"/>
    </message>
    <message name="groupGetPreparedMessages">
        <part name="parameters" element="tns:groupGetPreparedMessages"/>
    </message>
    <message name="groupGetPreparedMessagesResponse">
        <part name="parameters" element="tns:groupGetPreparedMessagesResponse"/>
    </message>
    <message name="groupGetAllGroupSettingsTemplates">
        <part name="parameters" element="tns:groupGetAllGroupSettingsTemplates"/>
    </message>
    <message name="groupGetAllGroupSettingsTemplatesResponse">
        <part name="parameters" element="tns:groupGetAllGroupSettingsTemplatesResponse"/>
    </message>
    <message name="groupArchive">
        <part name="parameters" element="tns:groupArchive"/>
    </message>
    <message name="groupArchiveResponse">
        <part name="parameters" element="tns:groupArchiveResponse"/>
    </message>
    <message name="groupActivate">
        <part name="parameters" element="tns:groupActivate"/>
    </message>
    <message name="groupActivateResponse">
        <part name="parameters" element="tns:groupActivateResponse"/>
    </message>
    <message name="userCreate">
        <part name="parameters" element="tns:userCreate"/>
    </message>
    <message name="userCreateResponse">
        <part name="parameters" element="tns:userCreateResponse"/>
    </message>
    <message name="userGet">
        <part name="parameters" element="tns:userGet"/>
    </message>
    <message name="userGetResponse">
        <part name="parameters" element="tns:userGetResponse"/>
    </message>
    <message name="userGetByEmail">
        <part name="parameters" element="tns:userGetByEmail"/>
    </message>
    <message name="userGetByEmailResponse">
        <part name="parameters" element="tns:userGetByEmailResponse"/>
    </message>
    <message name="userGetByIdentifier">
        <part name="parameters" element="tns:userGetByIdentifier"/>
    </message>
    <message name="userGetByIdentifierResponse">
        <part name="parameters" element="tns:userGetByIdentifierResponse"/>
    </message>
    <message name="userGetByMobileNumber">
        <part name="parameters" element="tns:userGetByMobileNumber"/>
    </message>
    <message name="userGetByMobileNumberResponse">
        <part name="parameters" element="tns:userGetByMobileNumberResponse"/>
    </message>
    <message name="userGetProfile">
        <part name="parameters" element="tns:userGetProfile"/>
    </message>
    <message name="userGetProfileResponse">
        <part name="parameters" element="tns:userGetProfileResponse"/>
    </message>
    <message name="userGetProfileByEmail">
        <part name="parameters" element="tns:userGetProfileByEmail"/>
    </message>
    <message name="userGetProfileByEmailResponse">
        <part name="parameters" element="tns:userGetProfileByEmailResponse"/>
    </message>
    <message name="userGetProfileByMobileNumber">
        <part name="parameters" element="tns:userGetProfileByMobileNumber"/>
    </message>
    <message name="userGetProfileByMobileNumberResponse">
        <part name="parameters" element="tns:userGetProfileByMobileNumberResponse"/>
    </message>
    <message name="userUpdateProfile">
        <part name="parameters" element="tns:userUpdateProfile"/>
    </message>
    <message name="userUpdateProfileResponse">
        <part name="parameters" element="tns:userUpdateProfileResponse"/>
    </message>
    <message name="userUpdateProfileByEmail">
        <part name="parameters" element="tns:userUpdateProfileByEmail"/>
    </message>
    <message name="userUpdateProfileByEmailResponse">
        <part name="parameters" element="tns:userUpdateProfileByEmailResponse"/>
    </message>
    <message name="userUpdateProfileByMobileNumber">
        <part name="parameters" element="tns:userUpdateProfileByMobileNumber"/>
    </message>
    <message name="userUpdateProfileByMobileNumberResponse">
        <part name="parameters" element="tns:userUpdateProfileByMobileNumberResponse"/>
    </message>
    <message name="userReplaceProfile">
        <part name="parameters" element="tns:userReplaceProfile"/>
    </message>
    <message name="userReplaceProfileResponse">
        <part name="parameters" element="tns:userReplaceProfileResponse"/>
    </message>
    <message name="userReplaceProfileByEmail">
        <part name="parameters" element="tns:userReplaceProfileByEmail"/>
    </message>
    <message name="userReplaceProfileByEmailResponse">
        <part name="parameters" element="tns:userReplaceProfileByEmailResponse"/>
    </message>
    <message name="userReplaceProfileByMobileNumber">
        <part name="parameters" element="tns:userReplaceProfileByMobileNumber"/>
    </message>
    <message name="userReplaceProfileByMobileNumberResponse">
        <part name="parameters" element="tns:userReplaceProfileByMobileNumberResponse"/>
    </message>
    <message name="userDelete">
        <part name="parameters" element="tns:userDelete"/>
    </message>
    <message name="userDeleteResponse">
        <part name="parameters" element="tns:userDeleteResponse"/>
    </message>
    <message name="userDeleteByEmail">
        <part name="parameters" element="tns:userDeleteByEmail"/>
    </message>
    <message name="userDeleteByEmailResponse">
        <part name="parameters" element="tns:userDeleteByEmailResponse"/>
    </message>
    <message name="userDeleteByMobileNumber">
        <part name="parameters" element="tns:userDeleteByMobileNumber"/>
    </message>
    <message name="userDeleteByMobileNumberResponse">
        <part name="parameters" element="tns:userDeleteByMobileNumberResponse"/>
    </message>
    <message name="userGetMessageHistory">
        <part name="parameters" element="tns:userGetMessageHistory"/>
    </message>
    <message name="userGetMessageHistoryResponse">
        <part name="parameters" element="tns:userGetMessageHistoryResponse"/>
    </message>
    <message name="membershipSubscribe">
        <part name="parameters" element="tns:membershipSubscribe"/>
    </message>
    <message name="membershipSubscribeResponse">
        <part name="parameters" element="tns:membershipSubscribeResponse"/>
    </message>
    <message name="membershipSubscribeByEmail">
        <part name="parameters" element="tns:membershipSubscribeByEmail"/>
    </message>
    <message name="membershipSubscribeByEmailResponse">
        <part name="parameters" element="tns:membershipSubscribeByEmailResponse"/>
    </message>
    <message name="membershipUnsubscribe">
        <part name="parameters" element="tns:membershipUnsubscribe"/>
    </message>
    <message name="membershipUnsubscribeResponse">
        <part name="parameters" element="tns:membershipUnsubscribeResponse"/>
    </message>
    <message name="membershipUnsubscribeFromMessage">
        <part name="parameters" element="tns:membershipUnsubscribeFromMessage"/>
    </message>
    <message name="membershipUnsubscribeFromMessageResponse">
        <part name="parameters" element="tns:membershipUnsubscribeFromMessageResponse"/>
    </message>
    <message name="membershipUnsubscribeByEmail">
        <part name="parameters" element="tns:membershipUnsubscribeByEmail"/>
    </message>
    <message name="membershipUnsubscribeByEmailResponse">
        <part name="parameters" element="tns:membershipUnsubscribeByEmailResponse"/>
    </message>
    <message name="membershipUnsubscribeFromMessageByEmail">
        <part name="parameters" element="tns:membershipUnsubscribeFromMessageByEmail"/>
    </message>
    <message name="membershipUnsubscribeFromMessageByEmailResponse">
        <part name="parameters" element="tns:membershipUnsubscribeFromMessageByEmailResponse"/>
    </message>
    <message name="membershipCreate">
        <part name="parameters" element="tns:membershipCreate"/>
    </message>
    <message name="membershipCreateResponse">
        <part name="parameters" element="tns:membershipCreateResponse"/>
    </message>
    <message name="membershipDelete">
        <part name="parameters" element="tns:membershipDelete"/>
    </message>
    <message name="membershipDeleteResponse">
        <part name="parameters" element="tns:membershipDeleteResponse"/>
    </message>
    <message name="membershipGet">
        <part name="parameters" element="tns:membershipGet"/>
    </message>
    <message name="membershipGetResponse">
        <part name="parameters" element="tns:membershipGetResponse"/>
    </message>
    <message name="membershipGetByEmail">
        <part name="parameters" element="tns:membershipGetByEmail"/>
    </message>
    <message name="membershipGetByEmailResponse">
        <part name="parameters" element="tns:membershipGetByEmailResponse"/>
    </message>
    <message name="membershipFindAll">
        <part name="parameters" element="tns:membershipFindAll"/>
    </message>
    <message name="membershipFindAllResponse">
        <part name="parameters" element="tns:membershipFindAllResponse"/>
    </message>
    <message name="membershipFindAllByEmail">
        <part name="parameters" element="tns:membershipFindAllByEmail"/>
    </message>
    <message name="membershipFindAllByEmailResponse">
        <part name="parameters" element="tns:membershipFindAllByEmailResponse"/>
    </message>
    <message name="membershipGetAttributes">
        <part name="parameters" element="tns:membershipGetAttributes"/>
    </message>
    <message name="membershipGetAttributesResponse">
        <part name="parameters" element="tns:membershipGetAttributesResponse"/>
    </message>
    <message name="membershipGetAttributesByEmail">
        <part name="parameters" element="tns:membershipGetAttributesByEmail"/>
    </message>
    <message name="membershipGetAttributesByEmailResponse">
        <part name="parameters" element="tns:membershipGetAttributesByEmailResponse"/>
    </message>
    <message name="membershipUpdateAttributes">
        <part name="parameters" element="tns:membershipUpdateAttributes"/>
    </message>
    <message name="membershipUpdateAttributesResponse">
        <part name="parameters" element="tns:membershipUpdateAttributesResponse"/>
    </message>
    <message name="membershipReplaceAttributes">
        <part name="parameters" element="tns:membershipReplaceAttributes"/>
    </message>
    <message name="membershipReplaceAttributesResponse">
        <part name="parameters" element="tns:membershipReplaceAttributesResponse"/>
    </message>
    <message name="messageSendSingle">
        <part name="parameters" element="tns:messageSendSingle"/>
    </message>
    <message name="messageSendSingleResponse">
        <part name="parameters" element="tns:messageSendSingleResponse"/>
    </message>
    <message name="messageSendTransactional">
        <part name="parameters" element="tns:messageSendTransactional"/>
    </message>
    <message name="messageSendTransactionalResponse">
        <part name="parameters" element="tns:messageSendTransactionalResponse"/>
    </message>
    <message name="messageGetUsedPersonalizations">
        <part name="parameters" element="tns:messageGetUsedPersonalizations"/>
    </message>
    <message name="messageGetUsedPersonalizationsResponse">
        <part name="parameters" element="tns:messageGetUsedPersonalizationsResponse"/>
    </message>
    <message name="messageGetManyUsedPersonalizations">
        <part name="parameters" element="tns:messageGetManyUsedPersonalizations"/>
    </message>
    <message name="messageGetManyUsedPersonalizationsResponse">
        <part name="parameters" element="tns:messageGetManyUsedPersonalizationsResponse"/>
    </message>
    <message name="messageValidate">
        <part name="parameters" element="tns:messageValidate"/>
    </message>
    <message name="messageValidateResponse">
        <part name="parameters" element="tns:messageValidateResponse"/>
    </message>
    <message name="messageValidateMany">
        <part name="parameters" element="tns:messageValidateMany"/>
    </message>
    <message name="messageValidateManyResponse">
        <part name="parameters" element="tns:messageValidateManyResponse"/>
    </message>
    <message name="messageGetStatistics">
        <part name="parameters" element="tns:messageGetStatistics"/>
    </message>
    <message name="messageGetStatisticsResponse">
        <part name="parameters" element="tns:messageGetStatisticsResponse"/>
    </message>
    <message name="messageGetStatisticsByExternalMessageId">
        <part name="parameters" element="tns:messageGetStatisticsByExternalMessageId"/>
    </message>
    <message name="messageGetStatisticsByExternalMessageIdResponse">
        <part name="parameters" element="tns:messageGetStatisticsByExternalMessageIdResponse"/>
    </message>
    <message name="messageFind">
        <part name="parameters" element="tns:messageFind"/>
    </message>
    <message name="messageFindResponse">
        <part name="parameters" element="tns:messageFindResponse"/>
    </message>
    <message name="messageGetTimeDistribution">
        <part name="parameters" element="tns:messageGetTimeDistribution"/>
    </message>
    <message name="messageGetTimeDistributionResponse">
        <part name="parameters" element="tns:messageGetTimeDistributionResponse"/>
    </message>
    <message name="messageGetTimeDistributionByExternalMessageId">
        <part name="parameters" element="tns:messageGetTimeDistributionByExternalMessageId"/>
    </message>
    <message name="messageGetTimeDistributionByExternalMessageIdResponse">
        <part name="parameters" element="tns:messageGetTimeDistributionByExternalMessageIdResponse"/>
    </message>
    <message name="landingpageFind">
        <part name="parameters" element="tns:landingpageFind"/>
    </message>
    <message name="landingpageFindResponse">
        <part name="parameters" element="tns:landingpageFindResponse"/>
    </message>
    <message name="landingpageGetStatus">
        <part name="parameters" element="tns:landingpageGetStatus"/>
    </message>
    <message name="landingpageGetStatusResponse">
        <part name="parameters" element="tns:landingpageGetStatusResponse"/>
    </message>
    <message name="landingpageDelete">
        <part name="parameters" element="tns:landingpageDelete"/>
    </message>
    <message name="landingpageDeleteResponse">
        <part name="parameters" element="tns:landingpageDeleteResponse"/>
    </message>
    <message name="landingpageDeleteMany">
        <part name="parameters" element="tns:landingpageDeleteMany"/>
    </message>
    <message name="landingpageDeleteManyResponse">
        <part name="parameters" element="tns:landingpageDeleteManyResponse"/>
    </message>
    <message name="cmsGetMessageDefinitions">
        <part name="parameters" element="tns:cmsGetMessageDefinitions"/>
    </message>
    <message name="cmsGetMessageDefinitionsResponse">
        <part name="parameters" element="tns:cmsGetMessageDefinitionsResponse"/>
    </message>
    <message name="cmsGetMimeMessage">
        <part name="parameters" element="tns:cmsGetMimeMessage"/>
    </message>
    <message name="cmsGetMimeMessageResponse">
        <part name="parameters" element="tns:cmsGetMimeMessageResponse"/>
    </message>
    <message name="asyncSubmit">
        <part name="parameters" element="tns:asyncSubmit"/>
    </message>
    <message name="asyncSubmitResponse">
        <part name="parameters" element="tns:asyncSubmitResponse"/>
    </message>
    <message name="asyncListTopics">
        <part name="parameters" element="tns:asyncListTopics"/>
    </message>
    <message name="asyncListTopicsResponse">
        <part name="parameters" element="tns:asyncListTopicsResponse"/>
    </message>
    <message name="asyncPoll">
        <part name="parameters" element="tns:asyncPoll"/>
    </message>
    <message name="asyncPollResponse">
        <part name="parameters" element="tns:asyncPollResponse"/>
    </message>
    <message name="asyncGetSubmitCount">
        <part name="parameters" element="tns:asyncGetSubmitCount"/>
    </message>
    <message name="asyncGetSubmitCountResponse">
        <part name="parameters" element="tns:asyncGetSubmitCountResponse"/>
    </message>
    <message name="asyncGetPollCount">
        <part name="parameters" element="tns:asyncGetPollCount"/>
    </message>
    <message name="asyncGetPollCountResponse">
        <part name="parameters" element="tns:asyncGetPollCountResponse"/>
    </message>
    <message name="asyncGetRemainingCapacity">
        <part name="parameters" element="tns:asyncGetRemainingCapacity"/>
    </message>
    <message name="asyncGetRemainingCapacityResponse">
        <part name="parameters" element="tns:asyncGetRemainingCapacityResponse"/>
    </message>
    <message name="contentStore">
        <part name="parameters" element="tns:contentStore"/>
    </message>
    <message name="contentStoreResponse">
        <part name="parameters" element="tns:contentStoreResponse"/>
    </message>
    <message name="contentDelete">
        <part name="parameters" element="tns:contentDelete"/>
    </message>
    <message name="contentDeleteResponse">
        <part name="parameters" element="tns:contentDeleteResponse"/>
    </message>
    <message name="emailSendMessages">
        <part name="parameters" element="tns:emailSendMessages"/>
    </message>
    <message name="emailSendMessagesResponse">
        <part name="parameters" element="tns:emailSendMessagesResponse"/>
    </message>
    <message name="blacklistCreateGroupEntries">
        <part name="parameters" element="tns:blacklistCreateGroupEntries"/>
    </message>
    <message name="blacklistCreateGroupEntriesResponse">
        <part name="parameters" element="tns:blacklistCreateGroupEntriesResponse"/>
    </message>
    <message name="blacklistCreateSystemEntries">
        <part name="parameters" element="tns:blacklistCreateSystemEntries"/>
    </message>
    <message name="blacklistCreateSystemEntriesResponse">
        <part name="parameters" element="tns:blacklistCreateSystemEntriesResponse"/>
    </message>
    <message name="blacklistDeleteGroupEntries">
        <part name="parameters" element="tns:blacklistDeleteGroupEntries"/>
    </message>
    <message name="blacklistDeleteGroupEntriesResponse">
        <part name="parameters" element="tns:blacklistDeleteGroupEntriesResponse"/>
    </message>
    <message name="blacklistDeleteSystemEntries">
        <part name="parameters" element="tns:blacklistDeleteSystemEntries"/>
    </message>
    <message name="blacklistDeleteSystemEntriesResponse">
        <part name="parameters" element="tns:blacklistDeleteSystemEntriesResponse"/>
    </message>
    <message name="draftmessageCreate">
        <part name="parameters" element="tns:draftmessageCreate"/>
    </message>
    <message name="draftmessageCreateResponse">
        <part name="parameters" element="tns:draftmessageCreateResponse"/>
    </message>
    <message name="draftmessageGet">
        <part name="parameters" element="tns:draftmessageGet"/>
    </message>
    <message name="draftmessageGetResponse">
        <part name="parameters" element="tns:draftmessageGetResponse"/>
    </message>
    <message name="draftmessageUpdate">
        <part name="parameters" element="tns:draftmessageUpdate"/>
    </message>
    <message name="draftmessageUpdateResponse">
        <part name="parameters" element="tns:draftmessageUpdateResponse"/>
    </message>
    <message name="draftmessageDelete">
        <part name="parameters" element="tns:draftmessageDelete"/>
    </message>
    <message name="draftmessageDeleteResponse">
        <part name="parameters" element="tns:draftmessageDeleteResponse"/>
    </message>
    <message name="draftmessageFind">
        <part name="parameters" element="tns:draftmessageFind"/>
    </message>
    <message name="draftmessageFindResponse">
        <part name="parameters" element="tns:draftmessageFindResponse"/>
    </message>
    <message name="preparedmessageFind">
        <part name="parameters" element="tns:preparedmessageFind"/>
    </message>
    <message name="preparedmessageFindResponse">
        <part name="parameters" element="tns:preparedmessageFindResponse"/>
    </message>
    <message name="relatedDataCreateRecord">
        <part name="parameters" element="tns:relatedDataCreateRecord"/>
    </message>
    <message name="relatedDataCreateRecordResponse">
        <part name="parameters" element="tns:relatedDataCreateRecordResponse"/>
    </message>
    <message name="relatedDataUpdateRecords">
        <part name="parameters" element="tns:relatedDataUpdateRecords"/>
    </message>
    <message name="relatedDataUpdateRecordsResponse">
        <part name="parameters" element="tns:relatedDataUpdateRecordsResponse"/>
    </message>
    <message name="relatedDataDeleteRecords">
        <part name="parameters" element="tns:relatedDataDeleteRecords"/>
    </message>
    <message name="relatedDataDeleteRecordsResponse">
        <part name="parameters" element="tns:relatedDataDeleteRecordsResponse"/>
    </message>
    <message name="contactCreate">
        <part name="parameters" element="tns:contactCreate"/>
    </message>
    <message name="contactCreateResponse">
        <part name="parameters" element="tns:contactCreateResponse"/>
    </message>
    <message name="contactGet">
        <part name="parameters" element="tns:contactGet"/>
    </message>
    <message name="contactGetResponse">
        <part name="parameters" element="tns:contactGetResponse"/>
    </message>
    <message name="contactUpdate">
        <part name="parameters" element="tns:contactUpdate"/>
    </message>
    <message name="contactUpdateResponse">
        <part name="parameters" element="tns:contactUpdateResponse"/>
    </message>
    <message name="contactDelete">
        <part name="parameters" element="tns:contactDelete"/>
    </message>
    <message name="contactDeleteResponse">
        <part name="parameters" element="tns:contactDeleteResponse"/>
    </message>
    <message name="processGetDetails">
        <part name="parameters" element="tns:processGetDetails"/>
    </message>
    <message name="processGetDetailsResponse">
        <part name="parameters" element="tns:processGetDetailsResponse"/>
    </message>
    <message name="processApplyAction">
        <part name="parameters" element="tns:processApplyAction"/>
    </message>
    <message name="processApplyActionResponse">
        <part name="parameters" element="tns:processApplyActionResponse"/>
    </message>
    <message name="automationFind">
        <part name="parameters" element="tns:automationFind"/>
    </message>
    <message name="automationFindResponse">
        <part name="parameters" element="tns:automationFindResponse"/>
    </message>
    <message name="automationGetDetails">
        <part name="parameters" element="tns:automationGetDetails"/>
    </message>
    <message name="automationGetDetailsResponse">
        <part name="parameters" element="tns:automationGetDetailsResponse"/>
    </message>
    <message name="automationRunOnce">
        <part name="parameters" element="tns:automationRunOnce"/>
    </message>
    <message name="automationRunOnceResponse">
        <part name="parameters" element="tns:automationRunOnceResponse"/>
    </message>
    <message name="ApiException">
        <part name="fault" element="tns:ApiException"/>
    </message>
    <message name="AsyncException">
        <part name="fault" element="tns:AsyncException"/>
    </message>
    <message name="BatchException">
        <part name="fault" element="tns:BatchException"/>
    </message>
    <message name="InvalidParameterException">
        <part name="fault" element="tns:InvalidParameterException"/>
    </message>
    <message name="LandingpageException">
        <part name="fault" element="tns:LandingpageException"/>
    </message>
    <message name="NoSuchObjectException">
        <part name="fault" element="tns:NoSuchObjectException"/>
    </message>
    <message name="ObjectAlreadyExistsException">
        <part name="fault" element="tns:ObjectAlreadyExistsException"/>
    </message>
    <message name="ServiceException">
        <part name="fault" element="tns:ServiceException"/>
    </message>
    <message name="UnexpectedErrorException">
        <part name="fault" element="tns:UnexpectedErrorException"/>
    </message>
    <portType name="Ecm">
        <!-- Returns information about the API version currently in use. -->
        <operation name="systemGetApiVersion">
            <input message="tns:systemGetApiVersion"/>
            <output message="tns:systemGetApiVersionResponse"/>
        </operation>
        <!-- Returns the current version of DMC. -->
        <operation name="systemGetEcmVersion">
            <input message="tns:systemGetEcmVersion"/>
            <output message="tns:systemGetEcmVersionResponse"/>
        </operation>
        <!-- Creates a new data field (custom user attribute) where information about users can be stored.
                <br/>With the standard DMC setup, you are permitted to create a limited number of custom attributes with different data types. Each custom user attribute has a unique name.
                If an attribute is no longer needed, it may be archived.
                Please contact your customer support representative if you need to delete an attribute. -->
        <operation name="metaCreateAttributeDefinitions">
            <input message="tns:metaCreateAttributeDefinitions"/>
            <output message="tns:metaCreateAttributeDefinitionsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list of all active custom attributes, which are defined for the users.
                Attributes wit the status 'archived' or 'system' will not be included in the list. -->
        <operation name="metaGetAttributeDefinitions">
            <input message="tns:metaGetAttributeDefinitions"/>
            <output message="tns:metaGetAttributeDefinitionsResponse"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Archives custom attributes. An archived attribute is still stored in the system.
                <br/>
                The attributes can still be in use for existing messages and sends, but they are not available in the GUI message creation process (i.e. personalization builder). -->
        <operation name="metaArchiveAttributeDefinitions">
            <input message="tns:metaArchiveAttributeDefinitions"/>
            <output message="tns:metaArchiveAttributeDefinitionsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Reactivates archived custom attributes that are named in parameter list. 
                <br/>
                After activation, they can be used in personalization during message composition process. -->
        <operation name="metaActivateAttributeDefinitions">
            <input message="tns:metaActivateAttributeDefinitions"/>
            <output message="tns:metaActivateAttributeDefinitionsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates the list of custom attributes that are available on the interface.
                It is used to archive, activate and create custom attributes.
                This call affects every custom attribute that is available in your system.
                It updates all of the attributes that are available for saving user data and reusing it in a different context.
                If an attribute is not mentioned, it is automatically deactivated.
                Errors and changes are delivered at the end of the process, when all attributes are processed.
                The update cannot be used in an interactional way. Errors do not stop the update process.
                The attribute with the error is skipped and the process continues with the next attribute.
                 It is not possible to change the attribute name, type or enumeration with this method.
                <br/>

                The results of the merge method are as follows:
                    <ul>
                	<li>New attributes are created if the attribute is listed and did not exist before.</li>
                    <li>Custom attributes that are not listed, are archived.</li>
                    <li>Custom attributes that are listed and are identical to the ones that already exist, have no state change.</li>
                    <li>Custom attributes that are archived and not listed remain archived. </li>
                    <li>Custom attributes which have a state other than archived/active generate an error and remain unchanged.</li>
                    </ul> -->
        <operation name="metaMergeAttributeDefinitions">
            <input message="tns:metaMergeAttributeDefinitions"/>
            <output message="tns:metaMergeAttributeDefinitionsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates new link categories.
                Link categories are automatically assigned to a link via a regex pattern.
                The link categories group together different links for statistical purposes
                and can be used to trigger automated processes when a link of a certain category is clicked.
                The name and pattern are mandatory inputs for the category.
                The ID is automatically assigned by the system. -->
        <operation name="metaCreateLinkCategories">
            <input message="tns:metaCreateLinkCategories"/>
            <output message="tns:metaCreateLinkCategoriesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list of all currently defined active link categories. -->
        <operation name="metaGetLinkCategories">
            <input message="tns:metaGetLinkCategories"/>
            <output message="tns:metaGetLinkCategoriesResponse"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates an existing link category identified by the parameter category. -->
        <operation name="metaUpdateLinkCategory">
            <input message="tns:metaUpdateLinkCategory"/>
            <output message="tns:metaUpdateLinkCategoryResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes a list of link categories.
                Deleting a link category can have an impact on reporting and statistics or on automated processes. -->
        <operation name="metaDeleteLinkCategory">
            <input message="tns:metaDeleteLinkCategory"/>
            <output message="tns:metaDeleteLinkCategoryResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Attaches given tags to the entity specified by entity type and entity id. -->
        <operation name="metaAttachTags">
            <input message="tns:metaAttachTags"/>
            <output message="tns:metaAttachTagsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Detaches(deletes) given tags from the entity specified by entity type and entity id. -->
        <operation name="metaDetachTags">
            <input message="tns:metaDetachTags"/>
            <output message="tns:metaDetachTagsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Finds which entities are labeled by given tags. -->
        <operation name="metaFindByTags">
            <input message="tns:metaFindByTags"/>
            <output message="tns:metaFindByTagsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Gets all tags of the given entity. -->
        <operation name="metaGetTags">
            <input message="tns:metaGetTags"/>
            <output message="tns:metaGetTagsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates a clone of a specific group that already exists in the system.
                Most of the sendout options and delivery settings are identical for the original and the clone.
                However, group members are not copied; that is, members of the group are not members of the clone.
                With the CloneOptions you have to specify how and with what mandatory Parameters the group will be cloned. -->
        <operation name="groupClone">
            <input message="tns:groupClone"/>
            <output message="tns:groupCloneResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the group Object of the specified group. The group is identified by group ID. -->
        <operation name="groupGet">
            <input message="tns:groupGet"/>
            <output message="tns:groupGetResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list of group IDs of all groups in the system that use the specified group attributes.
                Group attributes are only available in the group context and consist of an unique name and a value. -->
        <operation name="groupFindIdsByAttributes">
            <input message="tns:groupFindIdsByAttributes"/>
            <output message="tns:groupFindIdsByAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates and updates the group attributes.
                Existing attributes are overwritten. -->
        <operation name="groupSetAttributes">
            <input message="tns:groupSetAttributes"/>
            <output message="tns:groupSetAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Provides a list of all group attributes. -->
        <operation name="groupGetAttributes">
            <input message="tns:groupGetAttributes"/>
            <output message="tns:groupGetAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Overwrites the existing group settings with those of the settings template, 
                    identified by the settings ID.<br/>
                    GroupSettingTemplates predefine several settings in a template. The list of templates
                    available for a system can be requested with the API call.<br/>
                    The mechanism for using GoupSettingTemplates is only available in a special configuration. -->
        <operation name="groupOverrideGroupSettings">
            <input message="tns:groupOverrideGroupSettings"/>
            <output message="tns:groupOverrideGroupSettingsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns all of the prepared messages for a specific group. -->
        <operation name="groupGetPreparedMessages">
            <input message="tns:groupGetPreparedMessages"/>
            <output message="tns:groupGetPreparedMessagesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Gets all GroupSettingsTemplates that are defined in the system. 
                    GroupSettingTemplates predefine several settings in a template and can be applied 
                    to override the settings of a group with a special API call.
                     The mechanism for using GoupSettingTemplates is only available in a special configuration. -->
        <operation name="groupGetAllGroupSettingsTemplates">
            <input message="tns:groupGetAllGroupSettingsTemplates"/>
            <output message="tns:groupGetAllGroupSettingsTemplatesResponse"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Archive a list of groups and any dependent subgroups. Other
                    dependent objects, such as triggers and scheduled tasks, are not archived. -->
        <operation name="groupArchive">
            <input message="tns:groupArchive"/>
            <output message="tns:groupArchiveResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Activates archived groups. -->
        <operation name="groupActivate">
            <input message="tns:groupActivate"/>
            <output message="tns:groupActivateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates a new user.
               Requires either an email or a mobile number, as these fields are
               used as the unique user identifier in the system. -->
        <operation name="userCreate">
            <input message="tns:userCreate"/>
            <output message="tns:userCreateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user identified by the specified user ID. -->
        <operation name="userGet">
            <input message="tns:userGet"/>
            <output message="tns:userGetResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user identified by the specified email address. -->
        <operation name="userGetByEmail">
            <input message="tns:userGetByEmail"/>
            <output message="tns:userGetByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user identified by the specified identifier. -->
        <operation name="userGetByIdentifier">
            <input message="tns:userGetByIdentifier"/>
            <output message="tns:userGetByIdentifierResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user identified by the specified mobile number. -->
        <operation name="userGetByMobileNumber">
            <input message="tns:userGetByMobileNumber"/>
            <output message="tns:userGetByMobileNumberResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user's profile.
               The profile consists of attributes, which contain user data.
               All attributes can be accessed system-wide. -->
        <operation name="userGetProfile">
            <input message="tns:userGetProfile"/>
            <output message="tns:userGetProfileResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user's profile, identified by the email address. -->
        <operation name="userGetProfileByEmail">
            <input message="tns:userGetProfileByEmail"/>
            <output message="tns:userGetProfileByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the user's profile, identified by the mobile number. -->
        <operation name="userGetProfileByMobileNumber">
            <input message="tns:userGetProfileByMobileNumber"/>
            <output message="tns:userGetProfileByMobileNumberResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates the user's profile (data store in the attributes) with the information saved in the attribute list.
               This method only changes the information that is explicitly mentioned.<br/>
               Attributes that are not mentioned are not changed (there is also a replace method to
               change the entire profile of a user and to delete attribute values if the attribute
               is not mentioned for the user). -->
        <operation name="userUpdateProfile">
            <input message="tns:userUpdateProfile"/>
            <output message="tns:userUpdateProfileResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Updates a user identified via email. 
                Updates all data store in the attributes with the information saved in the attribute list.
                This method only changes the information that is explicitly mentioned.<br/> 	
                Attributes that are not mentioned are not changed (there is also a replace method to	 	
                change the entire profile of a user and to delete attribute values if the attribute	 	
                is not mentioned for the user). -->
        <operation name="userUpdateProfileByEmail">
            <input message="tns:userUpdateProfileByEmail"/>
            <output message="tns:userUpdateProfileByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Updates a user identified via mobile number.
                Updates all data store in the attributes with the information saved in the attribute list.
                This method only changes the information that is explicitly mentioned.<br/>
                Attributes that are not mentioned are not changed (there is also a replace method to
                change the entire profile of a user and to delete attribute values if the attribute
                is not mentioned for the user). -->
        <operation name="userUpdateProfileByMobileNumber">
            <input message="tns:userUpdateProfileByMobileNumber"/>
            <output message="tns:userUpdateProfileByMobileNumberResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Replaces all attribute values for a specific user.
               All attribute values that are transmitted with the method are added, and replace any existing values.<br/> 
               Any currently existing attribute values that are not found in the API call are deleted. -->
        <operation name="userReplaceProfile">
            <input message="tns:userReplaceProfile"/>
            <output message="tns:userReplaceProfileResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Replaces all attribute values for user identified via his email. 
                    All attribute values that are transmitted with the method are added, and replace any existing values.<br/>
                    Any currently existing attribute values that are not found in the API call are deleted. -->
        <operation name="userReplaceProfileByEmail">
            <input message="tns:userReplaceProfileByEmail"/>
            <output message="tns:userReplaceProfileByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Replaces all attribute values for user identified via his mobile number.
                    All attribute values that are transmitted with the method are added, and replace any existing values.<br/>
                    Any currently existing attribute values that are not found in the API call are deleted. -->
        <operation name="userReplaceProfileByMobileNumber">
            <input message="tns:userReplaceProfileByMobileNumber"/>
            <output message="tns:userReplaceProfileByMobileNumberResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
        </operation>
        <!-- Deletes the user identified by the specified ID. -->
        <operation name="userDelete">
            <input message="tns:userDelete"/>
            <output message="tns:userDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes the user identified by the specified email address. -->
        <operation name="userDeleteByEmail">
            <input message="tns:userDeleteByEmail"/>
            <output message="tns:userDeleteByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes the user identified by the specified mobile number. -->
        <operation name="userDeleteByMobileNumber">
            <input message="tns:userDeleteByMobileNumber"/>
            <output message="tns:userDeleteByMobileNumberResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Get message history of the user in the time interval [fromDate, toDate]. The interval cannot be greater than 1 month. -->
        <operation name="userGetMessageHistory">
            <input message="tns:userGetMessageHistory"/>
            <output message="tns:userGetMessageHistoryResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Subscribes an user to a group. With this call, the subscription is handled as a self subscription.
                Depending on the subscription mode used the user may have to confirm the subscription (opt in) and may be notified
                about successful subscription. -->
        <operation name="membershipSubscribe">
            <input message="tns:membershipSubscribe"/>
            <output message="tns:membershipSubscribeResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Subscribes an user to a group.
                Works like the subscribe call but works with an email address instead of
                a user ID. -->
        <operation name="membershipSubscribeByEmail">
            <input message="tns:membershipSubscribeByEmail"/>
            <output message="tns:membershipSubscribeByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Unsubscribes a user from a group. A notification is send to the manager. -->
        <operation name="membershipUnsubscribe">
            <input message="tns:membershipUnsubscribe"/>
            <output message="tns:membershipUnsubscribeResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Unsubscribes a user from a group. The unsubscription is associated with a specific message.
                Notification is sent to the group manager.
                Returns success only when the user is unsubscribed from the group and the unsubscription is associated with the specified message. -->
        <operation name="membershipUnsubscribeFromMessage">
            <input message="tns:membershipUnsubscribeFromMessage"/>
            <output message="tns:membershipUnsubscribeFromMessageResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Unsubscribes a user from a group based on email address. An unsubscribe confirmation email is sent to the user. -->
        <operation name="membershipUnsubscribeByEmail">
            <input message="tns:membershipUnsubscribeByEmail"/>
            <output message="tns:membershipUnsubscribeByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Unsubscribes a user from a group based on an email address. 
				The unsubscription is associated with a specific message. 
				An unsubscribe confirmation email is sent to the user. 
				Returns success only when the user is unsubscribed from the group and the unsubscription is associated with the specified message. -->
        <operation name="membershipUnsubscribeFromMessageByEmail">
            <input message="tns:membershipUnsubscribeFromMessageByEmail"/>
            <output message="tns:membershipUnsubscribeFromMessageByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates a new membership (meaning the user is subscribed to a group).
                This call differs from subscribe, in that notification is not sent. -->
        <operation name="membershipCreate">
            <input message="tns:membershipCreate"/>
            <output message="tns:membershipCreateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes an existing membership (meaning the user is unsubscribed from the group).
                This call differs from unsubscribe method in that the user is not notified about the unsubscription. -->
        <operation name="membershipDelete">
            <input message="tns:membershipDelete"/>
            <output message="tns:membershipDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a membership object. -->
        <operation name="membershipGet">
            <input message="tns:membershipGet"/>
            <output message="tns:membershipGetResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a membership object. -->
        <operation name="membershipGetByEmail">
            <input message="tns:membershipGetByEmail"/>
            <output message="tns:membershipGetByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list of membership objects,
                one membership object for each group the user is a member of. -->
        <operation name="membershipFindAll">
            <input message="tns:membershipFindAll"/>
            <output message="tns:membershipFindAllResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list of membership objects of the user.
                One membership object for each group the user is a member of. The user is identified by his email. -->
        <operation name="membershipFindAllByEmail">
            <input message="tns:membershipFindAllByEmail"/>
            <output message="tns:membershipFindAllByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a collection of member attribute for a user within the specified group. 
                Member attributes are used to save information for an individual user, 
                but in the context of a specific group. A member attribute contains a specific value for each recipient. -->
        <operation name="membershipGetAttributes">
            <input message="tns:membershipGetAttributes"/>
            <output message="tns:membershipGetAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a collection of member attribute for a user within the specified group. 
                Member attributes are used to save information for an individual user, but in the context of a specific group. 
                A member attribute contains a specific value for each recipient. The user is identified by his email. -->
        <operation name="membershipGetAttributesByEmail">
            <input message="tns:membershipGetAttributesByEmail"/>
            <output message="tns:membershipGetAttributesByEmailResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates the member attributes for a user within a certain group, if the user is a member of the group.
                If an attribute already exists, the value will be updated; if not, a new attribute will be created.
                If an existing member attribute is not in the attribute list being sent in the call, it will be left untouched. -->
        <operation name="membershipUpdateAttributes">
            <input message="tns:membershipUpdateAttributes"/>
            <output message="tns:membershipUpdateAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates the member attributes for a user within a certain group, if the user is a member of the group.
                If an attribute already exists, the value will be updated; if not, a new attribute will be created.
                If an existing member attribute is not in the attribute list being sent in the call, it will be deleted. -->
        <operation name="membershipReplaceAttributes">
            <input message="tns:membershipReplaceAttributes"/>
            <output message="tns:membershipReplaceAttributesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Sends a prepared message as a single message to a specific user. <br/>
                Prepared messages are saved copies of a message to which a group has been assigned.
                They are used to automatically send messages to single users (e.g. for birthday messages).
                Because sendouts in DMC are always managed via a group, this method automatically adds the
                user who receives the email to the group of the prepared message.<br/>
                Be aware that there are legal issues associated with contacting users.
                The system usually provides automated opt-in settings to satisfy these requirements. 
                However, this particular method does not include an opt-in process. The method changes memberships 
                without any additional processes. You may avoid legal complications if the user is already part of 
                the group that is sending the single message (and has successfully completed an opt-in process), 
                or if the group is only used for sending single messages. -->
        <operation name="messageSendSingle">
            <input message="tns:messageSendSingle"/>
            <output message="tns:messageSendSingleResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Sends a previously prepared message template as transactional message. -->
        <operation name="messageSendTransactional">
            <input message="tns:messageSendTransactional"/>
            <output message="tns:messageSendTransactionalResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the names of all user and group attributes that are referenced
                within the header and content area of a prepared message. <br/>
                The reference to the attributes is a personalization placeholder in the body of the message.
                All of these placeholders are replaced with individual user or message information during sendout.
                Be aware that member attributes are not returned by this method. -->
        <operation name="messageGetUsedPersonalizations">
            <input message="tns:messageGetUsedPersonalizations"/>
            <output message="tns:messageGetUsedPersonalizationsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the names of all of the user and group attributes that are referenced within the
                header and content areas for a list of prepared messages. See also getUsedPersonalizations(). -->
        <operation name="messageGetManyUsedPersonalizations">
            <input message="tns:messageGetManyUsedPersonalizations"/>
            <output message="tns:messageGetManyUsedPersonalizationsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
        </operation>
        <!-- Validates a prepared message for following functionality: <br/>
                    <ul>
                        <li> check if message is valid (InvalidObjectError -> objecttype message)</li>
                        <li> check if message contains no invalid contenstore items. </li>
                        <li> check if this message don't use archived Attributes (InvalidObjectError -> objecttype attribute)</li>
                    </ul>
                    <br/> -->
        <operation name="messageValidate">
            <input message="tns:messageValidate"/>
            <output message="tns:messageValidateResponse"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Validates a list of messages for following functionality: <br/> 	
                 <ul>	 	
                    <li> checks that the message is valid (InvalidObjectError -> objecttype message)</li>	 	
                    <li> checks that the message does not contain any invalid content store items. </li>	 	
                    <li> checks that the message doesn't use archived Attributes (InvalidObjectError -> objecttype attribute)</li>	 	
                  </ul>	 	
                <br/> -->
        <operation name="messageValidateMany">
            <input message="tns:messageValidateMany"/>
            <output message="tns:messageValidateManyResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Retrieves statistical data for a sent message. -->
        <operation name="messageGetStatistics">
            <input message="tns:messageGetStatistics"/>
            <output message="tns:messageGetStatisticsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Gets the metrics and KPIs of a sent message identified by the external message ID. -->
        <operation name="messageGetStatisticsByExternalMessageId">
            <input message="tns:messageGetStatisticsByExternalMessageId"/>
            <output message="tns:messageGetStatisticsByExternalMessageIdResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns list of message summary objects containing information about the messages satisfying the filtering
               		criterian supplied as input. The information will be returned for both messages in outbox or saved as prepared message. -->
        <operation name="messageFind">
            <input message="tns:messageFind"/>
            <output message="tns:messageFindResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Retrieves statistics time distribution information for a specific sent message. -->
        <operation name="messageGetTimeDistribution">
            <input message="tns:messageGetTimeDistribution"/>
            <output message="tns:messageGetTimeDistributionResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Retrieves statistics time distribution information for a specific sent message. -->
        <operation name="messageGetTimeDistributionByExternalMessageId">
            <input message="tns:messageGetTimeDistributionByExternalMessageId"/>
            <output message="tns:messageGetTimeDistributionByExternalMessageIdResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Find all landing pages that match a specific criteria. -->
        <operation name="landingpageFind">
            <input message="tns:landingpageFind"/>
            <output message="tns:landingpageFindResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the publishing status of a landing page. <br/>
                    Because these pages are usually associated with the lifetime of a particular email campaign, they may have
                    differing publishing status. Previously published pages that have become inactive because they are no
                    longer valid are sometimes redirected to another default page. <br/>
                    Possible States are:
                    <ul>
                       <li> PUBLISHED</li>
                       <li> INACTIVE</li>
                       <li> SCHEDULED</li>
                    </ul>
                    <br/> -->
        <operation name="landingpageGetStatus">
            <input message="tns:landingpageGetStatus"/>
            <output message="tns:landingpageGetStatusResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes the landing page with the specified landing page ID. -->
        <operation name="landingpageDelete">
            <input message="tns:landingpageDelete"/>
            <output message="tns:landingpageDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:LandingpageException" name="LandingpageException"/>
        </operation>
        <!-- Deletes the landing pages with the specified landing page IDs. -->
        <operation name="landingpageDeleteMany">
            <input message="tns:landingpageDeleteMany"/>
            <output message="tns:landingpageDeleteManyResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
            <fault message="tns:LandingpageException" name="LandingpageException"/>
        </operation>
        <!-- Returns a list of all CMS messages that are saved in the system. Every CMS message contains detailed information that identifies the message and the template that was used for creation. -->
        <operation name="cmsGetMessageDefinitions">
            <input message="tns:cmsGetMessageDefinitions"/>
            <output message="tns:cmsGetMessageDefinitionsResponse"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the specified CMS message in MIME message format. -->
        <operation name="cmsGetMimeMessage">
            <input message="tns:cmsGetMimeMessage"/>
            <output message="tns:cmsGetMimeMessageResponse"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Initiates an asynchronous job by providing a topic name (script name) and input data (arguments).
                The script name references an API script that is individually created for your system.
                DMC receives the call and starts processing the script asynchroniously.<br/>
                Results can be polled from the result queue via the topic name. -->
        <operation name="asyncSubmit">
            <input message="tns:asyncSubmit"/>
            <output message="tns:asyncSubmitResponse"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns a list list of all topic names for which a result topic exists. -->
        <operation name="asyncListTopics">
            <input message="tns:asyncListTopics"/>
            <output message="tns:asyncListTopicsResponse"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Retrieves a certain amount of results for a topic from the result queue.
                The result items that were retrieved are deleted from the server once they are transmitted. -->
        <operation name="asyncPoll">
            <input message="tns:asyncPoll"/>
            <output message="tns:asyncPollResponse"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the number of job results that were submitted for a certain topic. -->
        <operation name="asyncGetSubmitCount">
            <input message="tns:asyncGetSubmitCount"/>
            <output message="tns:asyncGetSubmitCountResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the number of result items that were retrieved/polled for a certain topic. -->
        <operation name="asyncGetPollCount">
            <input message="tns:asyncGetPollCount"/>
            <output message="tns:asyncGetPollCountResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the remaining capacity for a certain topic.
                Each result item is saved and assigned to a topic. Each topic has a limited amount of storage capacity.
                Submitting new results is blocked once the limit for the topic is reached.
                Whenever the asyncPoll() call is executed, the transmitted data is deleted and new space is made available. -->
        <operation name="asyncGetRemainingCapacity">
            <input message="tns:asyncGetRemainingCapacity"/>
            <output message="tns:asyncGetRemainingCapacityResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:AsyncException" name="AsyncException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Stores a content element in Content Store of DMC. -->
        <operation name="contentStore">
            <input message="tns:contentStore"/>
            <output message="tns:contentStoreResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes a content store element. -->
        <operation name="contentDelete">
            <input message="tns:contentDelete"/>
            <output message="tns:contentDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Sends a list of single messages without any preparation such as group creation, user creation, etc.<br/>
                All of the data that is needed for the sendout is transmitted with the method. This functionality omits a lot of the normal functionality of DMC because the method only uses the sendout of the system. -->
        <operation name="emailSendMessages">
            <input message="tns:emailSendMessages"/>
            <output message="tns:emailSendMessagesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:BatchException" name="BatchException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Adds new entries (email, emailDomain or mobileNumber) to the group blacklist. -->
        <operation name="blacklistCreateGroupEntries">
            <input message="tns:blacklistCreateGroupEntries"/>
            <output message="tns:blacklistCreateGroupEntriesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Adds new entries (email, email domain or mobile number) to the system blacklist. -->
        <operation name="blacklistCreateSystemEntries">
            <input message="tns:blacklistCreateSystemEntries"/>
            <output message="tns:blacklistCreateSystemEntriesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes entries (email, email domain or mobile number) from the group blacklist. -->
        <operation name="blacklistDeleteGroupEntries">
            <input message="tns:blacklistDeleteGroupEntries"/>
            <output message="tns:blacklistDeleteGroupEntriesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes entries (email, email domain or mobile number) from the system blacklist. -->
        <operation name="blacklistDeleteSystemEntries">
            <input message="tns:blacklistDeleteSystemEntries"/>
            <output message="tns:blacklistDeleteSystemEntriesResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates a new draft message. -->
        <operation name="draftmessageCreate">
            <input message="tns:draftmessageCreate"/>
            <output message="tns:draftmessageCreateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the draft message identified by the specified draft message ID. -->
        <operation name="draftmessageGet">
            <input message="tns:draftmessageGet"/>
            <output message="tns:draftmessageGetResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates an existing draft message. -->
        <operation name="draftmessageUpdate">
            <input message="tns:draftmessageUpdate"/>
            <output message="tns:draftmessageUpdateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes the user identified by the specified ID. -->
        <operation name="draftmessageDelete">
            <input message="tns:draftmessageDelete"/>
            <output message="tns:draftmessageDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns list of drafted message summary objects containing information about the messages satisfying the filtering
               		criterian supplied as input. -->
        <operation name="draftmessageFind">
            <input message="tns:draftmessageFind"/>
            <output message="tns:draftmessageFindResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns list of message summary objects containing information about the prepared messages 
               		satisfying the filtering criterian provided as input. -->
        <operation name="preparedmessageFind">
            <input message="tns:preparedmessageFind"/>
            <output message="tns:preparedmessageFindResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Adds a record to a data set. The data set is defined in the type RelatedDataRecord. -->
        <operation name="relatedDataCreateRecord">
            <input message="tns:relatedDataCreateRecord"/>
            <output message="tns:relatedDataCreateRecordResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates all or specific records for a key in a related data set. -->
        <operation name="relatedDataUpdateRecords">
            <input message="tns:relatedDataUpdateRecords"/>
            <output message="tns:relatedDataUpdateRecordsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes all or specific records from the related data set defined in the RelatedDataFilter type. -->
        <operation name="relatedDataDeleteRecords">
            <input message="tns:relatedDataDeleteRecords"/>
            <output message="tns:relatedDataDeleteRecordsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Creates a new contact. -->
        <operation name="contactCreate">
            <input message="tns:contactCreate"/>
            <output message="tns:contactCreateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns the contact identified by the specified identifier. -->
        <operation name="contactGet">
            <input message="tns:contactGet"/>
            <output message="tns:contactGetResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Updates existing contact. -->
        <operation name="contactUpdate">
            <input message="tns:contactUpdate"/>
            <output message="tns:contactUpdateResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:ObjectAlreadyExistsException" name="ObjectAlreadyExistsException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Deletes the contact identified by the specified identifier. -->
        <operation name="contactDelete">
            <input message="tns:contactDelete"/>
            <output message="tns:contactDeleteResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Returns information for the process identified by the specified process ID. -->
        <operation name="processGetDetails">
            <input message="tns:processGetDetails"/>
            <output message="tns:processGetDetailsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <!-- Changes the status of an existing process. -->
        <operation name="processApplyAction">
            <input message="tns:processApplyAction"/>
            <output message="tns:processApplyActionResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <operation name="automationFind">
            <input message="tns:automationFind"/>
            <output message="tns:automationFindResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <operation name="automationGetDetails">
            <input message="tns:automationGetDetails"/>
            <output message="tns:automationGetDetailsResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
        <operation name="automationRunOnce">
            <input message="tns:automationRunOnce"/>
            <output message="tns:automationRunOnceResponse"/>
            <fault message="tns:InvalidParameterException" name="InvalidParameterException"/>
            <fault message="tns:NoSuchObjectException" name="NoSuchObjectException"/>
            <fault message="tns:UnexpectedErrorException" name="UnexpectedErrorException"/>
        </operation>
    </portType>
    <binding name="EcmWSPortBinding" type="tns:Ecm">
        <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
        <operation name="systemGetApiVersion">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="systemGetEcmVersion">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="metaCreateAttributeDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaGetAttributeDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaArchiveAttributeDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaActivateAttributeDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaMergeAttributeDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaCreateLinkCategories">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaGetLinkCategories">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaUpdateLinkCategory">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaDeleteLinkCategory">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaAttachTags">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaDetachTags">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaFindByTags">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="metaGetTags">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupClone">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupGet">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupFindIdsByAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupSetAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupGetAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupOverrideGroupSettings">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupGetPreparedMessages">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupGetAllGroupSettingsTemplates">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupArchive">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="groupActivate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userCreate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGet">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetByIdentifier">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetByMobileNumber">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetProfile">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetProfileByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetProfileByMobileNumber">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userUpdateProfile">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userUpdateProfileByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userUpdateProfileByMobileNumber">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userReplaceProfile">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userReplaceProfileByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userReplaceProfileByMobileNumber">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
        </operation>
        <operation name="userDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userDeleteByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userDeleteByMobileNumber">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="userGetMessageHistory">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipSubscribe">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipSubscribeByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipUnsubscribe">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipUnsubscribeFromMessage">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipUnsubscribeByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipUnsubscribeFromMessageByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipCreate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipGet">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipGetByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipFindAll">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipFindAllByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipGetAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipGetAttributesByEmail">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipUpdateAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="membershipReplaceAttributes">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageSendSingle">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageSendTransactional">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetUsedPersonalizations">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetManyUsedPersonalizations">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageValidate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageValidateMany">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetStatistics">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetStatisticsByExternalMessageId">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageFind">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetTimeDistribution">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="messageGetTimeDistributionByExternalMessageId">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="landingpageFind">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="landingpageGetStatus">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="landingpageDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="LandingpageException">
                <soap:fault name="LandingpageException" use="literal"/>
            </fault>
        </operation>
        <operation name="landingpageDeleteMany">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
            <fault name="LandingpageException">
                <soap:fault name="LandingpageException" use="literal"/>
            </fault>
        </operation>
        <operation name="cmsGetMessageDefinitions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="cmsGetMimeMessage">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncSubmit">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncListTopics">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncPoll">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncGetSubmitCount">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncGetPollCount">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="asyncGetRemainingCapacity">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="AsyncException">
                <soap:fault name="AsyncException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contentStore">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contentDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="emailSendMessages">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="BatchException">
                <soap:fault name="BatchException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="blacklistCreateGroupEntries">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="blacklistCreateSystemEntries">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="blacklistDeleteGroupEntries">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="blacklistDeleteSystemEntries">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="draftmessageCreate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="draftmessageGet">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="draftmessageUpdate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="draftmessageDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="draftmessageFind">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="preparedmessageFind">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="relatedDataCreateRecord">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="relatedDataUpdateRecords">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="relatedDataDeleteRecords">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contactCreate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contactGet">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contactUpdate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="ObjectAlreadyExistsException">
                <soap:fault name="ObjectAlreadyExistsException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="contactDelete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="processGetDetails">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="processApplyAction">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="automationFind">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="automationGetDetails">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
        <operation name="automationRunOnce">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="InvalidParameterException">
                <soap:fault name="InvalidParameterException" use="literal"/>
            </fault>
            <fault name="NoSuchObjectException">
                <soap:fault name="NoSuchObjectException" use="literal"/>
            </fault>
            <fault name="UnexpectedErrorException">
                <soap:fault name="UnexpectedErrorException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="EcmWS">
        <port name="EcmWSPort" binding="tns:EcmWSPortBinding">
            <soap:address location="https://columbus.shortest-route.com/pgglobal_ecm/api/soap/v7"/>
        </port>
    </service>
</definitions>
